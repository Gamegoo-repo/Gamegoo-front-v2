/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseChatCreateResponse } from '../models';
// @ts-ignore
import type { ApiResponseListString } from '../models';
// @ts-ignore
import type { ChatCreateRequest } from '../models';
/**
 * ChatInternalApi - axios parameter creator
 * @export
 */
export const ChatInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 새로운 채팅 메시지를 등록하는 API 입니다.
         * @summary 채팅 메시지 등록 API
         * @param {number} memberId 
         * @param {string} chatroomUuid 
         * @param {ChatCreateRequest} chatCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChat: async (memberId: number, chatroomUuid: string, chatCreateRequest: ChatCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('addChat', 'memberId', memberId)
            // verify required parameter 'chatroomUuid' is not null or undefined
            assertParamExists('addChat', 'chatroomUuid', chatroomUuid)
            // verify required parameter 'chatCreateRequest' is not null or undefined
            assertParamExists('addChat', 'chatCreateRequest', chatCreateRequest)
            const localVarPath = `/api/v2/internal/{memberId}/chat/{chatroomUuid}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)))
                .replace(`{${"chatroomUuid"}}`, encodeURIComponent(String(chatroomUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 회원이 속한 채팅방의 uuid를 조회하는 API 입니다.
         * @summary 채팅방 uuid 조회 API
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatroomUuid: async (memberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getChatroomUuid', 'memberId', memberId)
            const localVarPath = `/api/v2/internal/{memberId}/chatroom/uuid`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatInternalApi - functional programming interface
 * @export
 */
export const ChatInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * 새로운 채팅 메시지를 등록하는 API 입니다.
         * @summary 채팅 메시지 등록 API
         * @param {number} memberId 
         * @param {string} chatroomUuid 
         * @param {ChatCreateRequest} chatCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addChat(memberId: number, chatroomUuid: string, chatCreateRequest: ChatCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseChatCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addChat(memberId, chatroomUuid, chatCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatInternalApi.addChat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 회원이 속한 채팅방의 uuid를 조회하는 API 입니다.
         * @summary 채팅방 uuid 조회 API
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatroomUuid(memberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatroomUuid(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatInternalApi.getChatroomUuid']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatInternalApi - factory interface
 * @export
 */
export const ChatInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatInternalApiFp(configuration)
    return {
        /**
         * 새로운 채팅 메시지를 등록하는 API 입니다.
         * @summary 채팅 메시지 등록 API
         * @param {number} memberId 
         * @param {string} chatroomUuid 
         * @param {ChatCreateRequest} chatCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChat(memberId: number, chatroomUuid: string, chatCreateRequest: ChatCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseChatCreateResponse> {
            return localVarFp.addChat(memberId, chatroomUuid, chatCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 회원이 속한 채팅방의 uuid를 조회하는 API 입니다.
         * @summary 채팅방 uuid 조회 API
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatroomUuid(memberId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListString> {
            return localVarFp.getChatroomUuid(memberId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatInternalApi - object-oriented interface
 * @export
 * @class ChatInternalApi
 * @extends {BaseAPI}
 */
export class ChatInternalApi extends BaseAPI {
    /**
     * 새로운 채팅 메시지를 등록하는 API 입니다.
     * @summary 채팅 메시지 등록 API
     * @param {number} memberId 
     * @param {string} chatroomUuid 
     * @param {ChatCreateRequest} chatCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatInternalApi
     */
    public addChat(memberId: number, chatroomUuid: string, chatCreateRequest: ChatCreateRequest, options?: RawAxiosRequestConfig) {
        return ChatInternalApiFp(this.configuration).addChat(memberId, chatroomUuid, chatCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 회원이 속한 채팅방의 uuid를 조회하는 API 입니다.
     * @summary 채팅방 uuid 조회 API
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatInternalApi
     */
    public getChatroomUuid(memberId: number, options?: RawAxiosRequestConfig) {
        return ChatInternalApiFp(this.configuration).getChatroomUuid(memberId, options).then((request) => request(this.axios, this.basePath));
    }
}

