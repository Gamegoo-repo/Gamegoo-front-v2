/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseBlockListResponse } from '../models';
// @ts-ignore
import type { ApiResponseBlockResponse } from '../models';
/**
 * BlockApi - axios parameter creator
 * @export
 */
export const BlockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 대상 회원을 차단하는 API 입니다.
         * @summary 회원 차단 API
         * @param {number} memberId 차단할 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockMember: async (memberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('blockMember', 'memberId', memberId)
            const localVarPath = `/api/v2/block/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 차단 목록에서 특정 회원이 탈퇴한 회원인 경우, 삭제하는 API 입니다. (차단 해제 아님)
         * @summary 차단 목록에서 탈퇴한 회원 삭제 API
         * @param {number} memberId 목록에서 삭제할 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlockMember: async (memberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('deleteBlockMember', 'memberId', memberId)
            const localVarPath = `/api/v2/block/delete/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 내가 차단한 회원의 목록을 조회하는 API 입니다.
         * @summary 차단 목록 조회 API
         * @param {number} page 페이지 번호, 1 이상의 숫자를 입력해 주세요.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockList: async (page: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getBlockList', 'page', page)
            const localVarPath = `/api/v2/block`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 해당 회원에 대한 차단을 해제하는 API 입니다.
         * @summary 회원 차단 해제 API
         * @param {number} memberId 차단을 해제할 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockMember: async (memberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('unblockMember', 'memberId', memberId)
            const localVarPath = `/api/v2/block/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlockApi - functional programming interface
 * @export
 */
export const BlockApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlockApiAxiosParamCreator(configuration)
    return {
        /**
         * 대상 회원을 차단하는 API 입니다.
         * @summary 회원 차단 API
         * @param {number} memberId 차단할 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockMember(memberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBlockResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockMember(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlockApi.blockMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 차단 목록에서 특정 회원이 탈퇴한 회원인 경우, 삭제하는 API 입니다. (차단 해제 아님)
         * @summary 차단 목록에서 탈퇴한 회원 삭제 API
         * @param {number} memberId 목록에서 삭제할 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlockMember(memberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBlockResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlockMember(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlockApi.deleteBlockMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 내가 차단한 회원의 목록을 조회하는 API 입니다.
         * @summary 차단 목록 조회 API
         * @param {number} page 페이지 번호, 1 이상의 숫자를 입력해 주세요.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockList(page: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBlockListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockList(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlockApi.getBlockList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 해당 회원에 대한 차단을 해제하는 API 입니다.
         * @summary 회원 차단 해제 API
         * @param {number} memberId 차단을 해제할 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unblockMember(memberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBlockResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unblockMember(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlockApi.unblockMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BlockApi - factory interface
 * @export
 */
export const BlockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlockApiFp(configuration)
    return {
        /**
         * 대상 회원을 차단하는 API 입니다.
         * @summary 회원 차단 API
         * @param {number} memberId 차단할 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockMember(memberId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBlockResponse> {
            return localVarFp.blockMember(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 차단 목록에서 특정 회원이 탈퇴한 회원인 경우, 삭제하는 API 입니다. (차단 해제 아님)
         * @summary 차단 목록에서 탈퇴한 회원 삭제 API
         * @param {number} memberId 목록에서 삭제할 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlockMember(memberId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBlockResponse> {
            return localVarFp.deleteBlockMember(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 내가 차단한 회원의 목록을 조회하는 API 입니다.
         * @summary 차단 목록 조회 API
         * @param {number} page 페이지 번호, 1 이상의 숫자를 입력해 주세요.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockList(page: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBlockListResponse> {
            return localVarFp.getBlockList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 해당 회원에 대한 차단을 해제하는 API 입니다.
         * @summary 회원 차단 해제 API
         * @param {number} memberId 차단을 해제할 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockMember(memberId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBlockResponse> {
            return localVarFp.unblockMember(memberId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlockApi - object-oriented interface
 * @export
 * @class BlockApi
 * @extends {BaseAPI}
 */
export class BlockApi extends BaseAPI {
    /**
     * 대상 회원을 차단하는 API 입니다.
     * @summary 회원 차단 API
     * @param {number} memberId 차단할 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public blockMember(memberId: number, options?: RawAxiosRequestConfig) {
        return BlockApiFp(this.configuration).blockMember(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 차단 목록에서 특정 회원이 탈퇴한 회원인 경우, 삭제하는 API 입니다. (차단 해제 아님)
     * @summary 차단 목록에서 탈퇴한 회원 삭제 API
     * @param {number} memberId 목록에서 삭제할 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public deleteBlockMember(memberId: number, options?: RawAxiosRequestConfig) {
        return BlockApiFp(this.configuration).deleteBlockMember(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 내가 차단한 회원의 목록을 조회하는 API 입니다.
     * @summary 차단 목록 조회 API
     * @param {number} page 페이지 번호, 1 이상의 숫자를 입력해 주세요.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public getBlockList(page: number, options?: RawAxiosRequestConfig) {
        return BlockApiFp(this.configuration).getBlockList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 해당 회원에 대한 차단을 해제하는 API 입니다.
     * @summary 회원 차단 해제 API
     * @param {number} memberId 차단을 해제할 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public unblockMember(memberId: number, options?: RawAxiosRequestConfig) {
        return BlockApiFp(this.configuration).unblockMember(memberId, options).then((request) => request(this.axios, this.basePath));
    }
}

