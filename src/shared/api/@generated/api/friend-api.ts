/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from "../common";
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	type RequestArgs,
	BaseAPI,
	RequiredError,
	operationServerMap,
} from "../base";
// @ts-ignore
import type { ApiResponseDeleteFriendResponse } from "../models";
// @ts-ignore
import type { ApiResponseFriendListResponse } from "../models";
// @ts-ignore
import type { ApiResponseFriendRequestResponse } from "../models";
// @ts-ignore
import type { ApiResponseListFriendInfoResponse } from "../models";
// @ts-ignore
import type { ApiResponseStarFriendResponse } from "../models";
/**
 * FriendApi - axios parameter creator
 * @export
 */
export const FriendApiAxiosParamCreator = function (
	configuration?: Configuration,
) {
	return {
		/**
		 * 대상 회원이 보낸 친구 요청을 수락 처리하는 API 입니다.
		 * @summary 친구 요청 수락 API
		 * @param {number} memberId 친구 요청을 수락할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		acceptFriendRequest: async (
			memberId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("acceptFriendRequest", "memberId", memberId);
			const localVarPath = `/api/v2/friend/request/{memberId}/accept`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 대상 회원에게 보낸 친구 요청을 취소하는 API 입니다.
		 * @summary 친구 요청 취소 API
		 * @param {number} memberId 친구 요청을 취소할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		cancelFriendRequest: async (
			memberId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("cancelFriendRequest", "memberId", memberId);
			const localVarPath = `/api/v2/friend/request/{memberId}`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "DELETE",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 친구 회원과의 친구 관계를 끊는 API 입니다.
		 * @summary 친구 삭제 API
		 * @param {number} memberId 삭제 처리할 친구 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFriend: async (
			memberId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("deleteFriend", "memberId", memberId);
			const localVarPath = `/api/v2/friend/{memberId}`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "DELETE",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 해당 회원의 친구 목록을 조회하는 API 입니다. 이름 오름차순(한글-영문-숫자 순)으로 정렬해 제공합니다.
		 * @summary 친구 목록 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFriendList: async (
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v2/friend`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 대상 회원이 보낸 친구 요청을 거절 처리하는 API 입니다.
		 * @summary 친구 요청 거절 API
		 * @param {number} memberId 친구 요청을 거절할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		rejectFriendRequest: async (
			memberId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("rejectFriendRequest", "memberId", memberId);
			const localVarPath = `/api/v2/friend/request/{memberId}/reject`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 대상 친구 회원을 즐겨찾기 설정/해제 하는 API 입니다.
		 * @summary 친구 즐겨찾기 설정/해제 API
		 * @param {number} memberId 즐겨찾기 설정/해제할 친구 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		reverseFriendLiked: async (
			memberId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("reverseFriendLiked", "memberId", memberId);
			const localVarPath = `/api/v2/friend/{memberId}/star`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 해당 회원의 친구 중, query string으로 시작하는 소환사명을 가진 모든 친구 목록을 조회합니다.
		 * @summary 소환사명으로 친구 검색 API
		 * @param {string} query 친구 목록 검색을 위한 소환사명 string으로, 100자 이하여야 합니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		searchFriend: async (
			query: string,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'query' is not null or undefined
			assertParamExists("searchFriend", "query", query);
			const localVarPath = `/api/v2/friend/search`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (query !== undefined) {
				localVarQueryParameter["query"] = query;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 대상 회원에게 친구 요청을 전송하는 API 입니다. 대상 회원에게 친구 요청 알림을 전송합니다.
		 * @summary 친구 요청 전송 API
		 * @param {number} memberId 친구 요청을 전송할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		sendFriendRequest: async (
			memberId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("sendFriendRequest", "memberId", memberId);
			const localVarPath = `/api/v2/friend/request/{memberId}`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * FriendApi - functional programming interface
 * @export
 */
export const FriendApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = FriendApiAxiosParamCreator(configuration);
	return {
		/**
		 * 대상 회원이 보낸 친구 요청을 수락 처리하는 API 입니다.
		 * @summary 친구 요청 수락 API
		 * @param {number} memberId 친구 요청을 수락할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async acceptFriendRequest(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseFriendRequestResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.acceptFriendRequest(memberId, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["FriendApi.acceptFriendRequest"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 대상 회원에게 보낸 친구 요청을 취소하는 API 입니다.
		 * @summary 친구 요청 취소 API
		 * @param {number} memberId 친구 요청을 취소할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async cancelFriendRequest(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseFriendRequestResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.cancelFriendRequest(memberId, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["FriendApi.cancelFriendRequest"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 친구 회원과의 친구 관계를 끊는 API 입니다.
		 * @summary 친구 삭제 API
		 * @param {number} memberId 삭제 처리할 친구 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteFriend(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseDeleteFriendResponse>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFriend(
				memberId,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["FriendApi.deleteFriend"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 해당 회원의 친구 목록을 조회하는 API 입니다. 이름 오름차순(한글-영문-숫자 순)으로 정렬해 제공합니다.
		 * @summary 친구 목록 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFriendList(
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseFriendListResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getFriendList(options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["FriendApi.getFriendList"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 대상 회원이 보낸 친구 요청을 거절 처리하는 API 입니다.
		 * @summary 친구 요청 거절 API
		 * @param {number} memberId 친구 요청을 거절할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async rejectFriendRequest(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseFriendRequestResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.rejectFriendRequest(memberId, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["FriendApi.rejectFriendRequest"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 대상 친구 회원을 즐겨찾기 설정/해제 하는 API 입니다.
		 * @summary 친구 즐겨찾기 설정/해제 API
		 * @param {number} memberId 즐겨찾기 설정/해제할 친구 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async reverseFriendLiked(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseStarFriendResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.reverseFriendLiked(memberId, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["FriendApi.reverseFriendLiked"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 해당 회원의 친구 중, query string으로 시작하는 소환사명을 가진 모든 친구 목록을 조회합니다.
		 * @summary 소환사명으로 친구 검색 API
		 * @param {string} query 친구 목록 검색을 위한 소환사명 string으로, 100자 이하여야 합니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async searchFriend(
			query: string,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseListFriendInfoResponse>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.searchFriend(
				query,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["FriendApi.searchFriend"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 대상 회원에게 친구 요청을 전송하는 API 입니다. 대상 회원에게 친구 요청 알림을 전송합니다.
		 * @summary 친구 요청 전송 API
		 * @param {number} memberId 친구 요청을 전송할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async sendFriendRequest(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseFriendRequestResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.sendFriendRequest(memberId, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["FriendApi.sendFriendRequest"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
	};
};

/**
 * FriendApi - factory interface
 * @export
 */
export const FriendApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance,
) {
	const localVarFp = FriendApiFp(configuration);
	return {
		/**
		 * 대상 회원이 보낸 친구 요청을 수락 처리하는 API 입니다.
		 * @summary 친구 요청 수락 API
		 * @param {number} memberId 친구 요청을 수락할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		acceptFriendRequest(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseFriendRequestResponse> {
			return localVarFp
				.acceptFriendRequest(memberId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 대상 회원에게 보낸 친구 요청을 취소하는 API 입니다.
		 * @summary 친구 요청 취소 API
		 * @param {number} memberId 친구 요청을 취소할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		cancelFriendRequest(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseFriendRequestResponse> {
			return localVarFp
				.cancelFriendRequest(memberId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 친구 회원과의 친구 관계를 끊는 API 입니다.
		 * @summary 친구 삭제 API
		 * @param {number} memberId 삭제 처리할 친구 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFriend(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseDeleteFriendResponse> {
			return localVarFp
				.deleteFriend(memberId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 해당 회원의 친구 목록을 조회하는 API 입니다. 이름 오름차순(한글-영문-숫자 순)으로 정렬해 제공합니다.
		 * @summary 친구 목록 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFriendList(
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseFriendListResponse> {
			return localVarFp
				.getFriendList(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 대상 회원이 보낸 친구 요청을 거절 처리하는 API 입니다.
		 * @summary 친구 요청 거절 API
		 * @param {number} memberId 친구 요청을 거절할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		rejectFriendRequest(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseFriendRequestResponse> {
			return localVarFp
				.rejectFriendRequest(memberId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 대상 친구 회원을 즐겨찾기 설정/해제 하는 API 입니다.
		 * @summary 친구 즐겨찾기 설정/해제 API
		 * @param {number} memberId 즐겨찾기 설정/해제할 친구 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		reverseFriendLiked(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseStarFriendResponse> {
			return localVarFp
				.reverseFriendLiked(memberId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 해당 회원의 친구 중, query string으로 시작하는 소환사명을 가진 모든 친구 목록을 조회합니다.
		 * @summary 소환사명으로 친구 검색 API
		 * @param {string} query 친구 목록 검색을 위한 소환사명 string으로, 100자 이하여야 합니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		searchFriend(
			query: string,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseListFriendInfoResponse> {
			return localVarFp
				.searchFriend(query, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 대상 회원에게 친구 요청을 전송하는 API 입니다. 대상 회원에게 친구 요청 알림을 전송합니다.
		 * @summary 친구 요청 전송 API
		 * @param {number} memberId 친구 요청을 전송할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		sendFriendRequest(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseFriendRequestResponse> {
			return localVarFp
				.sendFriendRequest(memberId, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * FriendApi - object-oriented interface
 * @export
 * @class FriendApi
 * @extends {BaseAPI}
 */
export class FriendApi extends BaseAPI {
	/**
	 * 대상 회원이 보낸 친구 요청을 수락 처리하는 API 입니다.
	 * @summary 친구 요청 수락 API
	 * @param {number} memberId 친구 요청을 수락할 대상 회원의 id 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FriendApi
	 */
	public acceptFriendRequest(
		memberId: number,
		options?: RawAxiosRequestConfig,
	) {
		return FriendApiFp(this.configuration)
			.acceptFriendRequest(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 대상 회원에게 보낸 친구 요청을 취소하는 API 입니다.
	 * @summary 친구 요청 취소 API
	 * @param {number} memberId 친구 요청을 취소할 대상 회원의 id 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FriendApi
	 */
	public cancelFriendRequest(
		memberId: number,
		options?: RawAxiosRequestConfig,
	) {
		return FriendApiFp(this.configuration)
			.cancelFriendRequest(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 친구 회원과의 친구 관계를 끊는 API 입니다.
	 * @summary 친구 삭제 API
	 * @param {number} memberId 삭제 처리할 친구 회원의 id 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FriendApi
	 */
	public deleteFriend(memberId: number, options?: RawAxiosRequestConfig) {
		return FriendApiFp(this.configuration)
			.deleteFriend(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 해당 회원의 친구 목록을 조회하는 API 입니다. 이름 오름차순(한글-영문-숫자 순)으로 정렬해 제공합니다.
	 * @summary 친구 목록 조회 API
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FriendApi
	 */
	public getFriendList(options?: RawAxiosRequestConfig) {
		return FriendApiFp(this.configuration)
			.getFriendList(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 대상 회원이 보낸 친구 요청을 거절 처리하는 API 입니다.
	 * @summary 친구 요청 거절 API
	 * @param {number} memberId 친구 요청을 거절할 대상 회원의 id 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FriendApi
	 */
	public rejectFriendRequest(
		memberId: number,
		options?: RawAxiosRequestConfig,
	) {
		return FriendApiFp(this.configuration)
			.rejectFriendRequest(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 대상 친구 회원을 즐겨찾기 설정/해제 하는 API 입니다.
	 * @summary 친구 즐겨찾기 설정/해제 API
	 * @param {number} memberId 즐겨찾기 설정/해제할 친구 회원의 id 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FriendApi
	 */
	public reverseFriendLiked(memberId: number, options?: RawAxiosRequestConfig) {
		return FriendApiFp(this.configuration)
			.reverseFriendLiked(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 해당 회원의 친구 중, query string으로 시작하는 소환사명을 가진 모든 친구 목록을 조회합니다.
	 * @summary 소환사명으로 친구 검색 API
	 * @param {string} query 친구 목록 검색을 위한 소환사명 string으로, 100자 이하여야 합니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FriendApi
	 */
	public searchFriend(query: string, options?: RawAxiosRequestConfig) {
		return FriendApiFp(this.configuration)
			.searchFriend(query, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 대상 회원에게 친구 요청을 전송하는 API 입니다. 대상 회원에게 친구 요청 알림을 전송합니다.
	 * @summary 친구 요청 전송 API
	 * @param {number} memberId 친구 요청을 전송할 대상 회원의 id 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof FriendApi
	 */
	public sendFriendRequest(memberId: number, options?: RawAxiosRequestConfig) {
		return FriendApiFp(this.configuration)
			.sendFriendRequest(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
