/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseMannerInsertResponse } from '../models';
// @ts-ignore
import type { ApiResponseMannerKeywordListResponse } from '../models';
// @ts-ignore
import type { ApiResponseMannerRatingResponse } from '../models';
// @ts-ignore
import type { ApiResponseMannerResponse } from '../models';
// @ts-ignore
import type { ApiResponseMannerUpdateResponse } from '../models';
// @ts-ignore
import type { MannerInsertRequest } from '../models';
// @ts-ignore
import type { MannerUpdateRequest } from '../models';
/**
 * MannerApi - axios parameter creator
 * @export
 */
export const MannerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 비매너 평가를 등록하는 API 입니다.
         * @summary 비매너 평가 등록 API
         * @param {number} memberId 비매너 평가를 등록할 대상 회원의 id 입니다.
         * @param {MannerInsertRequest} mannerInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNegativeMannerRating: async (memberId: number, mannerInsertRequest: MannerInsertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('addNegativeMannerRating', 'memberId', memberId)
            // verify required parameter 'mannerInsertRequest' is not null or undefined
            assertParamExists('addNegativeMannerRating', 'mannerInsertRequest', mannerInsertRequest)
            const localVarPath = `/api/v2/manner/negative/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mannerInsertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 매너 평가를 등록하는 API 입니다.
         * @summary 매너 평가 등록 API
         * @param {number} memberId 매너 평가를 등록할 대상 회원의 id 입니다.
         * @param {MannerInsertRequest} mannerInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPositiveMannerRating: async (memberId: number, mannerInsertRequest: MannerInsertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('addPositiveMannerRating', 'memberId', memberId)
            // verify required parameter 'mannerInsertRequest' is not null or undefined
            assertParamExists('addPositiveMannerRating', 'mannerInsertRequest', mannerInsertRequest)
            const localVarPath = `/api/v2/manner/positive/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mannerInsertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 회원의 매너 키워드 정보를 조회하는 API 입니다.
         * @summary 특정 회원의 매너 키워드 정보 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMannerKeywordInfo: async (memberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getMannerKeywordInfo', 'memberId', memberId)
            const localVarPath = `/api/v2/manner/keyword/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 회원의 매너 레벨 정보를 조회하는 API 입니다.
         * @summary 특정 회원의 매너 레벨 정보 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMannerLevelInfo: async (memberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getMannerLevelInfo', 'memberId', memberId)
            const localVarPath = `/api/v2/manner/level/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 회원에 대해 내가 실시한 비매너 평가를 조회하는 API 입니다.
         * @summary 특정 회원에 대한 나의 비매너 평가 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeMannerRatingInfo: async (memberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getNegativeMannerRatingInfo', 'memberId', memberId)
            const localVarPath = `/api/v2/manner/negative/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 회원에 대해 내가 실시한 매너 평가를 조회하는 API 입니다.
         * @summary 특정 회원에 대한 나의 매너 평가 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositiveMannerRatingInfo: async (memberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getPositiveMannerRatingInfo', 'memberId', memberId)
            const localVarPath = `/api/v2/manner/positive/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 매너/비매너 평가를 수정하는 API 입니다.
         * @summary 매너/비매너 평가 수정 API
         * @param {number} mannerId 수정하고자 하는 매너/비매너 평가 id 입니다.
         * @param {MannerUpdateRequest} mannerUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMannerRating: async (mannerId: number, mannerUpdateRequest: MannerUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mannerId' is not null or undefined
            assertParamExists('updateMannerRating', 'mannerId', mannerId)
            // verify required parameter 'mannerUpdateRequest' is not null or undefined
            assertParamExists('updateMannerRating', 'mannerUpdateRequest', mannerUpdateRequest)
            const localVarPath = `/api/v2/manner/{mannerId}`
                .replace(`{${"mannerId"}}`, encodeURIComponent(String(mannerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mannerUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MannerApi - functional programming interface
 * @export
 */
export const MannerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MannerApiAxiosParamCreator(configuration)
    return {
        /**
         * 비매너 평가를 등록하는 API 입니다.
         * @summary 비매너 평가 등록 API
         * @param {number} memberId 비매너 평가를 등록할 대상 회원의 id 입니다.
         * @param {MannerInsertRequest} mannerInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNegativeMannerRating(memberId: number, mannerInsertRequest: MannerInsertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMannerInsertResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNegativeMannerRating(memberId, mannerInsertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MannerApi.addNegativeMannerRating']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 매너 평가를 등록하는 API 입니다.
         * @summary 매너 평가 등록 API
         * @param {number} memberId 매너 평가를 등록할 대상 회원의 id 입니다.
         * @param {MannerInsertRequest} mannerInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPositiveMannerRating(memberId: number, mannerInsertRequest: MannerInsertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMannerInsertResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPositiveMannerRating(memberId, mannerInsertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MannerApi.addPositiveMannerRating']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 회원의 매너 키워드 정보를 조회하는 API 입니다.
         * @summary 특정 회원의 매너 키워드 정보 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMannerKeywordInfo(memberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMannerKeywordListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMannerKeywordInfo(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MannerApi.getMannerKeywordInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 회원의 매너 레벨 정보를 조회하는 API 입니다.
         * @summary 특정 회원의 매너 레벨 정보 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMannerLevelInfo(memberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMannerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMannerLevelInfo(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MannerApi.getMannerLevelInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 회원에 대해 내가 실시한 비매너 평가를 조회하는 API 입니다.
         * @summary 특정 회원에 대한 나의 비매너 평가 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNegativeMannerRatingInfo(memberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMannerRatingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNegativeMannerRatingInfo(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MannerApi.getNegativeMannerRatingInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 회원에 대해 내가 실시한 매너 평가를 조회하는 API 입니다.
         * @summary 특정 회원에 대한 나의 매너 평가 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPositiveMannerRatingInfo(memberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMannerRatingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPositiveMannerRatingInfo(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MannerApi.getPositiveMannerRatingInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 매너/비매너 평가를 수정하는 API 입니다.
         * @summary 매너/비매너 평가 수정 API
         * @param {number} mannerId 수정하고자 하는 매너/비매너 평가 id 입니다.
         * @param {MannerUpdateRequest} mannerUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMannerRating(mannerId: number, mannerUpdateRequest: MannerUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMannerUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMannerRating(mannerId, mannerUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MannerApi.updateMannerRating']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MannerApi - factory interface
 * @export
 */
export const MannerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MannerApiFp(configuration)
    return {
        /**
         * 비매너 평가를 등록하는 API 입니다.
         * @summary 비매너 평가 등록 API
         * @param {number} memberId 비매너 평가를 등록할 대상 회원의 id 입니다.
         * @param {MannerInsertRequest} mannerInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNegativeMannerRating(memberId: number, mannerInsertRequest: MannerInsertRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMannerInsertResponse> {
            return localVarFp.addNegativeMannerRating(memberId, mannerInsertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 매너 평가를 등록하는 API 입니다.
         * @summary 매너 평가 등록 API
         * @param {number} memberId 매너 평가를 등록할 대상 회원의 id 입니다.
         * @param {MannerInsertRequest} mannerInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPositiveMannerRating(memberId: number, mannerInsertRequest: MannerInsertRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMannerInsertResponse> {
            return localVarFp.addPositiveMannerRating(memberId, mannerInsertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 회원의 매너 키워드 정보를 조회하는 API 입니다.
         * @summary 특정 회원의 매너 키워드 정보 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMannerKeywordInfo(memberId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMannerKeywordListResponse> {
            return localVarFp.getMannerKeywordInfo(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 회원의 매너 레벨 정보를 조회하는 API 입니다.
         * @summary 특정 회원의 매너 레벨 정보 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMannerLevelInfo(memberId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMannerResponse> {
            return localVarFp.getMannerLevelInfo(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 회원에 대해 내가 실시한 비매너 평가를 조회하는 API 입니다.
         * @summary 특정 회원에 대한 나의 비매너 평가 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeMannerRatingInfo(memberId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMannerRatingResponse> {
            return localVarFp.getNegativeMannerRatingInfo(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 회원에 대해 내가 실시한 매너 평가를 조회하는 API 입니다.
         * @summary 특정 회원에 대한 나의 매너 평가 조회 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositiveMannerRatingInfo(memberId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMannerRatingResponse> {
            return localVarFp.getPositiveMannerRatingInfo(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 매너/비매너 평가를 수정하는 API 입니다.
         * @summary 매너/비매너 평가 수정 API
         * @param {number} mannerId 수정하고자 하는 매너/비매너 평가 id 입니다.
         * @param {MannerUpdateRequest} mannerUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMannerRating(mannerId: number, mannerUpdateRequest: MannerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMannerUpdateResponse> {
            return localVarFp.updateMannerRating(mannerId, mannerUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MannerApi - object-oriented interface
 * @export
 * @class MannerApi
 * @extends {BaseAPI}
 */
export class MannerApi extends BaseAPI {
    /**
     * 비매너 평가를 등록하는 API 입니다.
     * @summary 비매너 평가 등록 API
     * @param {number} memberId 비매너 평가를 등록할 대상 회원의 id 입니다.
     * @param {MannerInsertRequest} mannerInsertRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MannerApi
     */
    public addNegativeMannerRating(memberId: number, mannerInsertRequest: MannerInsertRequest, options?: RawAxiosRequestConfig) {
        return MannerApiFp(this.configuration).addNegativeMannerRating(memberId, mannerInsertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 매너 평가를 등록하는 API 입니다.
     * @summary 매너 평가 등록 API
     * @param {number} memberId 매너 평가를 등록할 대상 회원의 id 입니다.
     * @param {MannerInsertRequest} mannerInsertRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MannerApi
     */
    public addPositiveMannerRating(memberId: number, mannerInsertRequest: MannerInsertRequest, options?: RawAxiosRequestConfig) {
        return MannerApiFp(this.configuration).addPositiveMannerRating(memberId, mannerInsertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 회원의 매너 키워드 정보를 조회하는 API 입니다.
     * @summary 특정 회원의 매너 키워드 정보 조회 API
     * @param {number} memberId 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MannerApi
     */
    public getMannerKeywordInfo(memberId: number, options?: RawAxiosRequestConfig) {
        return MannerApiFp(this.configuration).getMannerKeywordInfo(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 회원의 매너 레벨 정보를 조회하는 API 입니다.
     * @summary 특정 회원의 매너 레벨 정보 조회 API
     * @param {number} memberId 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MannerApi
     */
    public getMannerLevelInfo(memberId: number, options?: RawAxiosRequestConfig) {
        return MannerApiFp(this.configuration).getMannerLevelInfo(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 회원에 대해 내가 실시한 비매너 평가를 조회하는 API 입니다.
     * @summary 특정 회원에 대한 나의 비매너 평가 조회 API
     * @param {number} memberId 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MannerApi
     */
    public getNegativeMannerRatingInfo(memberId: number, options?: RawAxiosRequestConfig) {
        return MannerApiFp(this.configuration).getNegativeMannerRatingInfo(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 회원에 대해 내가 실시한 매너 평가를 조회하는 API 입니다.
     * @summary 특정 회원에 대한 나의 매너 평가 조회 API
     * @param {number} memberId 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MannerApi
     */
    public getPositiveMannerRatingInfo(memberId: number, options?: RawAxiosRequestConfig) {
        return MannerApiFp(this.configuration).getPositiveMannerRatingInfo(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 매너/비매너 평가를 수정하는 API 입니다.
     * @summary 매너/비매너 평가 수정 API
     * @param {number} mannerId 수정하고자 하는 매너/비매너 평가 id 입니다.
     * @param {MannerUpdateRequest} mannerUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MannerApi
     */
    public updateMannerRating(mannerId: number, mannerUpdateRequest: MannerUpdateRequest, options?: RawAxiosRequestConfig) {
        return MannerApiFp(this.configuration).updateMannerRating(mannerId, mannerUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

