/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from "../common";
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	type RequestArgs,
	BaseAPI,
	RequiredError,
	operationServerMap,
} from "../base";
// @ts-ignore
import type { ApiResponseMyProfileResponse } from "../models";
// @ts-ignore
import type { ApiResponseOtherProfileResponse } from "../models";
// @ts-ignore
import type { ApiResponseString } from "../models";
// @ts-ignore
import type { GameStyleRequest } from "../models";
// @ts-ignore
import type { IsMikeRequest } from "../models";
// @ts-ignore
import type { PositionRequest } from "../models";
// @ts-ignore
import type { ProfileImageRequest } from "../models";
/**
 * MemberApi - axios parameter creator
 * @export
 */
export const MemberApiAxiosParamCreator = function (
	configuration?: Configuration,
) {
	return {
		/**
		 * API for Gamestyle addition and modification
		 * @summary gamestyle 추가 및 수정 API 입니다.
		 * @param {GameStyleRequest} gameStyleRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addGameStyle: async (
			gameStyleRequest: GameStyleRequest,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'gameStyleRequest' is not null or undefined
			assertParamExists("addGameStyle", "gameStyleRequest", gameStyleRequest);
			const localVarPath = `/api/v2/profile/gamestyle`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PUT",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				gameStyleRequest,
				localVarRequestOptions,
				configuration,
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * API for looking up other member with jwt
		 * @summary 다른 회원 프로필 조회 API 입니다. (jwt 토큰 O)
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getMember: async (
			id: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getMember", "id", id);
			const localVarPath = `/api/v2/profile/other`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (id !== undefined) {
				localVarQueryParameter["id"] = id;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * API for looking up member with jwt
		 * @summary 내 프로필 조회 API 입니다. (jwt 토큰 O)
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getMemberJWT: async (
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v2/profile`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 개발용 어드민 권한 부여 API
		 * @summary 어드민 권한 부여 API (개발용)
		 * @param {number} memberId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		grantAdminRole: async (
			memberId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("grantAdminRole", "memberId", memberId);
			const localVarPath = `/api/v2/profile/admin/grant/{memberId}`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * API for isMike Modification
		 * @summary 마이크 여부 수정 API 입니다.
		 * @param {IsMikeRequest} isMikeRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyIsMike: async (
			isMikeRequest: IsMikeRequest,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'isMikeRequest' is not null or undefined
			assertParamExists("modifyIsMike", "isMikeRequest", isMikeRequest);
			const localVarPath = `/api/v2/profile/mike`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PUT",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				isMikeRequest,
				localVarRequestOptions,
				configuration,
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * API for Main/Sub/Want Position Modification
		 * @summary 주/부/원하는 포지션 수정 API 입니다.
		 * @param {PositionRequest} positionRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyPosition: async (
			positionRequest: PositionRequest,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'positionRequest' is not null or undefined
			assertParamExists("modifyPosition", "positionRequest", positionRequest);
			const localVarPath = `/api/v2/profile/position`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PUT",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				positionRequest,
				localVarRequestOptions,
				configuration,
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * API for Profile Image Modification
		 * @summary 프로필 이미지 수정 API 입니다.
		 * @param {ProfileImageRequest} profileImageRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyProfileImage: async (
			profileImageRequest: ProfileImageRequest,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'profileImageRequest' is not null or undefined
			assertParamExists(
				"modifyProfileImage",
				"profileImageRequest",
				profileImageRequest,
			);
			const localVarPath = `/api/v2/profile/profileImage`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PUT",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				profileImageRequest,
				localVarRequestOptions,
				configuration,
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * API for refreshing champion statistics
		 * @summary 챔피언 통계 새로고침 API 입니다.
		 * @param {number} [memberId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		refreshChampionStats: async (
			memberId?: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v2/profile/champion-stats/refresh`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PUT",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (memberId !== undefined) {
				localVarQueryParameter["memberId"] = memberId;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 어드민 권한을 일반 사용자로 변경하는 API
		 * @summary 일반 사용자 권한으로 변경 API (개발용)
		 * @param {number} memberId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		revokeAdminRole: async (
			memberId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("revokeAdminRole", "memberId", memberId);
			const localVarPath = `/api/v2/profile/admin/revoke/{memberId}`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * MemberApi - functional programming interface
 * @export
 */
export const MemberApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = MemberApiAxiosParamCreator(configuration);
	return {
		/**
		 * API for Gamestyle addition and modification
		 * @summary gamestyle 추가 및 수정 API 입니다.
		 * @param {GameStyleRequest} gameStyleRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addGameStyle(
			gameStyleRequest: GameStyleRequest,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addGameStyle(
				gameStyleRequest,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["MemberApi.addGameStyle"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * API for looking up other member with jwt
		 * @summary 다른 회원 프로필 조회 API 입니다. (jwt 토큰 O)
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getMember(
			id: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseOtherProfileResponse>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getMember(
				id,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["MemberApi.getMember"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * API for looking up member with jwt
		 * @summary 내 프로필 조회 API 입니다. (jwt 토큰 O)
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getMemberJWT(
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseMyProfileResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getMemberJWT(options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["MemberApi.getMemberJWT"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 개발용 어드민 권한 부여 API
		 * @summary 어드민 권한 부여 API (개발용)
		 * @param {number} memberId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async grantAdminRole(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.grantAdminRole(
				memberId,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["MemberApi.grantAdminRole"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * API for isMike Modification
		 * @summary 마이크 여부 수정 API 입니다.
		 * @param {IsMikeRequest} isMikeRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyIsMike(
			isMikeRequest: IsMikeRequest,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.modifyIsMike(
				isMikeRequest,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["MemberApi.modifyIsMike"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * API for Main/Sub/Want Position Modification
		 * @summary 주/부/원하는 포지션 수정 API 입니다.
		 * @param {PositionRequest} positionRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyPosition(
			positionRequest: PositionRequest,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.modifyPosition(
				positionRequest,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["MemberApi.modifyPosition"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * API for Profile Image Modification
		 * @summary 프로필 이미지 수정 API 입니다.
		 * @param {ProfileImageRequest} profileImageRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyProfileImage(
			profileImageRequest: ProfileImageRequest,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.modifyProfileImage(
					profileImageRequest,
					options,
				);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["MemberApi.modifyProfileImage"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * API for refreshing champion statistics
		 * @summary 챔피언 통계 새로고침 API 입니다.
		 * @param {number} [memberId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async refreshChampionStats(
			memberId?: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseMyProfileResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.refreshChampionStats(memberId, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["MemberApi.refreshChampionStats"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 어드민 권한을 일반 사용자로 변경하는 API
		 * @summary 일반 사용자 권한으로 변경 API (개발용)
		 * @param {number} memberId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async revokeAdminRole(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.revokeAdminRole(
				memberId,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["MemberApi.revokeAdminRole"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
	};
};

/**
 * MemberApi - factory interface
 * @export
 */
export const MemberApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance,
) {
	const localVarFp = MemberApiFp(configuration);
	return {
		/**
		 * API for Gamestyle addition and modification
		 * @summary gamestyle 추가 및 수정 API 입니다.
		 * @param {GameStyleRequest} gameStyleRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addGameStyle(
			gameStyleRequest: GameStyleRequest,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.addGameStyle(gameStyleRequest, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * API for looking up other member with jwt
		 * @summary 다른 회원 프로필 조회 API 입니다. (jwt 토큰 O)
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getMember(
			id: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseOtherProfileResponse> {
			return localVarFp
				.getMember(id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * API for looking up member with jwt
		 * @summary 내 프로필 조회 API 입니다. (jwt 토큰 O)
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getMemberJWT(
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseMyProfileResponse> {
			return localVarFp
				.getMemberJWT(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 개발용 어드민 권한 부여 API
		 * @summary 어드민 권한 부여 API (개발용)
		 * @param {number} memberId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		grantAdminRole(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.grantAdminRole(memberId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * API for isMike Modification
		 * @summary 마이크 여부 수정 API 입니다.
		 * @param {IsMikeRequest} isMikeRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyIsMike(
			isMikeRequest: IsMikeRequest,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.modifyIsMike(isMikeRequest, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * API for Main/Sub/Want Position Modification
		 * @summary 주/부/원하는 포지션 수정 API 입니다.
		 * @param {PositionRequest} positionRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyPosition(
			positionRequest: PositionRequest,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.modifyPosition(positionRequest, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * API for Profile Image Modification
		 * @summary 프로필 이미지 수정 API 입니다.
		 * @param {ProfileImageRequest} profileImageRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyProfileImage(
			profileImageRequest: ProfileImageRequest,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.modifyProfileImage(profileImageRequest, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * API for refreshing champion statistics
		 * @summary 챔피언 통계 새로고침 API 입니다.
		 * @param {number} [memberId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		refreshChampionStats(
			memberId?: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseMyProfileResponse> {
			return localVarFp
				.refreshChampionStats(memberId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 어드민 권한을 일반 사용자로 변경하는 API
		 * @summary 일반 사용자 권한으로 변경 API (개발용)
		 * @param {number} memberId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		revokeAdminRole(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.revokeAdminRole(memberId, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * MemberApi - object-oriented interface
 * @export
 * @class MemberApi
 * @extends {BaseAPI}
 */
export class MemberApi extends BaseAPI {
	/**
	 * API for Gamestyle addition and modification
	 * @summary gamestyle 추가 및 수정 API 입니다.
	 * @param {GameStyleRequest} gameStyleRequest
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MemberApi
	 */
	public addGameStyle(
		gameStyleRequest: GameStyleRequest,
		options?: RawAxiosRequestConfig,
	) {
		return MemberApiFp(this.configuration)
			.addGameStyle(gameStyleRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * API for looking up other member with jwt
	 * @summary 다른 회원 프로필 조회 API 입니다. (jwt 토큰 O)
	 * @param {number} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MemberApi
	 */
	public getMember(id: number, options?: RawAxiosRequestConfig) {
		return MemberApiFp(this.configuration)
			.getMember(id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * API for looking up member with jwt
	 * @summary 내 프로필 조회 API 입니다. (jwt 토큰 O)
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MemberApi
	 */
	public getMemberJWT(options?: RawAxiosRequestConfig) {
		return MemberApiFp(this.configuration)
			.getMemberJWT(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 개발용 어드민 권한 부여 API
	 * @summary 어드민 권한 부여 API (개발용)
	 * @param {number} memberId
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MemberApi
	 */
	public grantAdminRole(memberId: number, options?: RawAxiosRequestConfig) {
		return MemberApiFp(this.configuration)
			.grantAdminRole(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * API for isMike Modification
	 * @summary 마이크 여부 수정 API 입니다.
	 * @param {IsMikeRequest} isMikeRequest
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MemberApi
	 */
	public modifyIsMike(
		isMikeRequest: IsMikeRequest,
		options?: RawAxiosRequestConfig,
	) {
		return MemberApiFp(this.configuration)
			.modifyIsMike(isMikeRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * API for Main/Sub/Want Position Modification
	 * @summary 주/부/원하는 포지션 수정 API 입니다.
	 * @param {PositionRequest} positionRequest
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MemberApi
	 */
	public modifyPosition(
		positionRequest: PositionRequest,
		options?: RawAxiosRequestConfig,
	) {
		return MemberApiFp(this.configuration)
			.modifyPosition(positionRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * API for Profile Image Modification
	 * @summary 프로필 이미지 수정 API 입니다.
	 * @param {ProfileImageRequest} profileImageRequest
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MemberApi
	 */
	public modifyProfileImage(
		profileImageRequest: ProfileImageRequest,
		options?: RawAxiosRequestConfig,
	) {
		return MemberApiFp(this.configuration)
			.modifyProfileImage(profileImageRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * API for refreshing champion statistics
	 * @summary 챔피언 통계 새로고침 API 입니다.
	 * @param {number} [memberId]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MemberApi
	 */
	public refreshChampionStats(
		memberId?: number,
		options?: RawAxiosRequestConfig,
	) {
		return MemberApiFp(this.configuration)
			.refreshChampionStats(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 어드민 권한을 일반 사용자로 변경하는 API
	 * @summary 일반 사용자 권한으로 변경 API (개발용)
	 * @param {number} memberId
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MemberApi
	 */
	public revokeAdminRole(memberId: number, options?: RawAxiosRequestConfig) {
		return MemberApiFp(this.configuration)
			.revokeAdminRole(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
