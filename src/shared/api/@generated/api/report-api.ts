/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from "../common";
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	type RequestArgs,
	BaseAPI,
	RequiredError,
	operationServerMap,
} from "../base";
// @ts-ignore
import type { ApiResponseReportInsertResponse } from "../models";
// @ts-ignore
import type { ApiResponseReportPageResponse } from "../models";
// @ts-ignore
import type { ApiResponseReportProcessResponse } from "../models";
// @ts-ignore
import type { ApiResponseString } from "../models";
// @ts-ignore
import type { BanType } from "../models";
// @ts-ignore
import type { Pageable } from "../models";
// @ts-ignore
import type { ReportPath } from "../models";
// @ts-ignore
import type { ReportProcessRequest } from "../models";
// @ts-ignore
import type { ReportRequest } from "../models";
// @ts-ignore
import type { ReportSortOrder } from "../models";
// @ts-ignore
import type { ReportType } from "../models";
/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (
	configuration?: Configuration,
) {
	return {
		/**
		 * 대상 회원에 대한 신고를 등록하는 API 입니다.
		 * @summary 신고 등록 API
		 * @param {number} memberId 신고할 대상 회원의 id 입니다.
		 * @param {ReportRequest} reportRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addReport: async (
			memberId: number,
			reportRequest: ReportRequest,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("addReport", "memberId", memberId);
			// verify required parameter 'reportRequest' is not null or undefined
			assertParamExists("addReport", "reportRequest", reportRequest);
			const localVarPath = `/api/v2/report/{memberId}`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				reportRequest,
				localVarRequestOptions,
				configuration,
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 관리자가 신고된 게시글을 삭제하는 API입니다.  해당 신고와 연관된 게시글이 있는 경우 삭제 처리되며, 게시글이 없는 경우 적절한 메시지가 반환됩니다.  **반환 메시지:** - 성공: \"신고된 게시글 삭제가 완료되었습니다\" - 게시글 없음: \"삭제할 게시글이 존재하지 않습니다\"
		 * @summary 신고된 게시글 삭제 (관리자 전용)
		 * @param {number} reportId 삭제할 게시글과 연관된 신고의 ID입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteReportedPost: async (
			reportId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'reportId' is not null or undefined
			assertParamExists("deleteReportedPost", "reportId", reportId);
			const localVarPath = `/api/v2/report/{reportId}/post`.replace(
				`{${"reportId"}}`,
				encodeURIComponent(String(reportId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "DELETE",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 관리자만 접근 가능한 신고 목록 고급 필터링 조회 API입니다.  **필터링 옵션:** - reportedMemberKeyword: 피신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - reporterKeyword: 신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - contentKeyword: 신고 내용으로 검색 - reportPaths: 신고 경로 (BOARD=게시판, CHAT=채팅, PROFILE=프로필) - reportTypes: 신고 사유 (1=스팸, 2=불법정보, 3=성희롱, 4=욕설/혐오, 5=개인정보노출, 6=불쾌한표현) - startDate/endDate: 신고 날짜 범위 (yyyy-MM-dd\'T\'HH:mm:ss) - reportCountMin/Max/Exact: 누적 신고 횟수 필터 - isDeleted: 게시물 삭제 여부 (true/false) - banTypes: 제재 상태 (NONE, WARNING, BAN_1D, BAN_3D, BAN_5D, BAN_1W, BAN_2W, BAN_1M, PERMANENT) - sortOrder: 정렬 순서 (LATEST: 최신순, OLDEST: 오래된순) - 기본값: LATEST - page/size: 페이징 (예: page=0&size=10)  **사용 예시:** /api/v2/report/list?reportedMemberKeyword=홍길동#KR1&reportTypes=1,4&startDate=2024-01-01T00:00:00&banTypes=WARNING&page=0&size=10
		 * @summary 신고 목록 조회 (관리자 전용)
		 * @param {Pageable} pageable
		 * @param {string} [reportedMemberKeyword]
		 * @param {string} [reporterKeyword]
		 * @param {string} [contentKeyword]
		 * @param {ReportPath} [reportPaths] 신고 경로
		 * @param {ReportType} [reportTypes] 신고 유형 (1&#x3D;스팸, 2&#x3D;불법정보, 3&#x3D;성희롱, 4&#x3D;욕설/혐오, 5&#x3D;개인정보노출, 6&#x3D;불쾌한표현)
		 * @param {string} [startDate]
		 * @param {string} [endDate]
		 * @param {number} [reportCountMin]
		 * @param {number} [reportCountMax]
		 * @param {number} [reportCountExact]
		 * @param {boolean} [isDeleted]
		 * @param {BanType} [banTypes] 제재 상태
		 * @param {ReportSortOrder} [sortOrder] 정렬 순서
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getReportList: async (
			pageable: Pageable,
			reportedMemberKeyword?: string,
			reporterKeyword?: string,
			contentKeyword?: string,
			reportPaths?: ReportPath,
			reportTypes?: ReportType,
			startDate?: string,
			endDate?: string,
			reportCountMin?: number,
			reportCountMax?: number,
			reportCountExact?: number,
			isDeleted?: boolean,
			banTypes?: BanType,
			sortOrder?: ReportSortOrder,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'pageable' is not null or undefined
			assertParamExists("getReportList", "pageable", pageable);
			const localVarPath = `/api/v2/report/list`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (reportedMemberKeyword !== undefined) {
				localVarQueryParameter["reportedMemberKeyword"] = reportedMemberKeyword;
			}

			if (reporterKeyword !== undefined) {
				localVarQueryParameter["reporterKeyword"] = reporterKeyword;
			}

			if (contentKeyword !== undefined) {
				localVarQueryParameter["contentKeyword"] = contentKeyword;
			}

			if (reportPaths !== undefined) {
				localVarQueryParameter["reportPaths"] = reportPaths;
			}

			if (reportTypes !== undefined) {
				localVarQueryParameter["reportTypes"] = reportTypes;
			}

			if (startDate !== undefined) {
				localVarQueryParameter["startDate"] =
					(startDate as any) instanceof Date
						? (startDate as any).toISOString()
						: startDate;
			}

			if (endDate !== undefined) {
				localVarQueryParameter["endDate"] =
					(endDate as any) instanceof Date
						? (endDate as any).toISOString()
						: endDate;
			}

			if (reportCountMin !== undefined) {
				localVarQueryParameter["reportCountMin"] = reportCountMin;
			}

			if (reportCountMax !== undefined) {
				localVarQueryParameter["reportCountMax"] = reportCountMax;
			}

			if (reportCountExact !== undefined) {
				localVarQueryParameter["reportCountExact"] = reportCountExact;
			}

			if (isDeleted !== undefined) {
				localVarQueryParameter["isDeleted"] = isDeleted;
			}

			if (banTypes !== undefined) {
				localVarQueryParameter["banTypes"] = banTypes;
			}

			if (sortOrder !== undefined) {
				localVarQueryParameter["sortOrder"] = sortOrder;
			}

			if (pageable !== undefined) {
				for (const [key, value] of Object.entries(pageable)) {
					localVarQueryParameter[key] = value;
				}
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 관리자가 신고를 처리하여 제재를 적용하는 API입니다.  **Request Body:** - banType: 적용할 제재 유형 (필수)   - NONE: 제재 없음   - WARNING: 경고   - BAN_1D: 1일 정지   - BAN_3D: 3일 정지   - BAN_5D: 5일 정지   - BAN_1W: 1주 정지   - BAN_2W: 2주 정지   - BAN_1M: 1개월 정지   - PERMANENT: 영구 정지 - processReason: 제재 사유 (선택사항)
		 * @summary 신고 처리 (관리자 전용)
		 * @param {number} reportId 처리할 신고의 ID입니다.
		 * @param {ReportProcessRequest} reportProcessRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		processReport: async (
			reportId: number,
			reportProcessRequest: ReportProcessRequest,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'reportId' is not null or undefined
			assertParamExists("processReport", "reportId", reportId);
			// verify required parameter 'reportProcessRequest' is not null or undefined
			assertParamExists(
				"processReport",
				"reportProcessRequest",
				reportProcessRequest,
			);
			const localVarPath = `/api/v2/report/{reportId}/process`.replace(
				`{${"reportId"}}`,
				encodeURIComponent(String(reportId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PUT",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				reportProcessRequest,
				localVarRequestOptions,
				configuration,
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration);
	return {
		/**
		 * 대상 회원에 대한 신고를 등록하는 API 입니다.
		 * @summary 신고 등록 API
		 * @param {number} memberId 신고할 대상 회원의 id 입니다.
		 * @param {ReportRequest} reportRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addReport(
			memberId: number,
			reportRequest: ReportRequest,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseReportInsertResponse>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addReport(
				memberId,
				reportRequest,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ReportApi.addReport"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 관리자가 신고된 게시글을 삭제하는 API입니다.  해당 신고와 연관된 게시글이 있는 경우 삭제 처리되며, 게시글이 없는 경우 적절한 메시지가 반환됩니다.  **반환 메시지:** - 성공: \"신고된 게시글 삭제가 완료되었습니다\" - 게시글 없음: \"삭제할 게시글이 존재하지 않습니다\"
		 * @summary 신고된 게시글 삭제 (관리자 전용)
		 * @param {number} reportId 삭제할 게시글과 연관된 신고의 ID입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteReportedPost(
			reportId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.deleteReportedPost(reportId, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ReportApi.deleteReportedPost"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 관리자만 접근 가능한 신고 목록 고급 필터링 조회 API입니다.  **필터링 옵션:** - reportedMemberKeyword: 피신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - reporterKeyword: 신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - contentKeyword: 신고 내용으로 검색 - reportPaths: 신고 경로 (BOARD=게시판, CHAT=채팅, PROFILE=프로필) - reportTypes: 신고 사유 (1=스팸, 2=불법정보, 3=성희롱, 4=욕설/혐오, 5=개인정보노출, 6=불쾌한표현) - startDate/endDate: 신고 날짜 범위 (yyyy-MM-dd\'T\'HH:mm:ss) - reportCountMin/Max/Exact: 누적 신고 횟수 필터 - isDeleted: 게시물 삭제 여부 (true/false) - banTypes: 제재 상태 (NONE, WARNING, BAN_1D, BAN_3D, BAN_5D, BAN_1W, BAN_2W, BAN_1M, PERMANENT) - sortOrder: 정렬 순서 (LATEST: 최신순, OLDEST: 오래된순) - 기본값: LATEST - page/size: 페이징 (예: page=0&size=10)  **사용 예시:** /api/v2/report/list?reportedMemberKeyword=홍길동#KR1&reportTypes=1,4&startDate=2024-01-01T00:00:00&banTypes=WARNING&page=0&size=10
		 * @summary 신고 목록 조회 (관리자 전용)
		 * @param {Pageable} pageable
		 * @param {string} [reportedMemberKeyword]
		 * @param {string} [reporterKeyword]
		 * @param {string} [contentKeyword]
		 * @param {ReportPath} [reportPaths] 신고 경로
		 * @param {ReportType} [reportTypes] 신고 유형 (1&#x3D;스팸, 2&#x3D;불법정보, 3&#x3D;성희롱, 4&#x3D;욕설/혐오, 5&#x3D;개인정보노출, 6&#x3D;불쾌한표현)
		 * @param {string} [startDate]
		 * @param {string} [endDate]
		 * @param {number} [reportCountMin]
		 * @param {number} [reportCountMax]
		 * @param {number} [reportCountExact]
		 * @param {boolean} [isDeleted]
		 * @param {BanType} [banTypes] 제재 상태
		 * @param {ReportSortOrder} [sortOrder] 정렬 순서
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getReportList(
			pageable: Pageable,
			reportedMemberKeyword?: string,
			reporterKeyword?: string,
			contentKeyword?: string,
			reportPaths?: ReportPath,
			reportTypes?: ReportType,
			startDate?: string,
			endDate?: string,
			reportCountMin?: number,
			reportCountMax?: number,
			reportCountExact?: number,
			isDeleted?: boolean,
			banTypes?: BanType,
			sortOrder?: ReportSortOrder,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseReportPageResponse>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getReportList(
				pageable,
				reportedMemberKeyword,
				reporterKeyword,
				contentKeyword,
				reportPaths,
				reportTypes,
				startDate,
				endDate,
				reportCountMin,
				reportCountMax,
				reportCountExact,
				isDeleted,
				banTypes,
				sortOrder,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ReportApi.getReportList"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 관리자가 신고를 처리하여 제재를 적용하는 API입니다.  **Request Body:** - banType: 적용할 제재 유형 (필수)   - NONE: 제재 없음   - WARNING: 경고   - BAN_1D: 1일 정지   - BAN_3D: 3일 정지   - BAN_5D: 5일 정지   - BAN_1W: 1주 정지   - BAN_2W: 2주 정지   - BAN_1M: 1개월 정지   - PERMANENT: 영구 정지 - processReason: 제재 사유 (선택사항)
		 * @summary 신고 처리 (관리자 전용)
		 * @param {number} reportId 처리할 신고의 ID입니다.
		 * @param {ReportProcessRequest} reportProcessRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async processReport(
			reportId: number,
			reportProcessRequest: ReportProcessRequest,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseReportProcessResponse>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.processReport(
				reportId,
				reportProcessRequest,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ReportApi.processReport"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
	};
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance,
) {
	const localVarFp = ReportApiFp(configuration);
	return {
		/**
		 * 대상 회원에 대한 신고를 등록하는 API 입니다.
		 * @summary 신고 등록 API
		 * @param {number} memberId 신고할 대상 회원의 id 입니다.
		 * @param {ReportRequest} reportRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addReport(
			memberId: number,
			reportRequest: ReportRequest,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseReportInsertResponse> {
			return localVarFp
				.addReport(memberId, reportRequest, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 관리자가 신고된 게시글을 삭제하는 API입니다.  해당 신고와 연관된 게시글이 있는 경우 삭제 처리되며, 게시글이 없는 경우 적절한 메시지가 반환됩니다.  **반환 메시지:** - 성공: \"신고된 게시글 삭제가 완료되었습니다\" - 게시글 없음: \"삭제할 게시글이 존재하지 않습니다\"
		 * @summary 신고된 게시글 삭제 (관리자 전용)
		 * @param {number} reportId 삭제할 게시글과 연관된 신고의 ID입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteReportedPost(
			reportId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.deleteReportedPost(reportId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 관리자만 접근 가능한 신고 목록 고급 필터링 조회 API입니다.  **필터링 옵션:** - reportedMemberKeyword: 피신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - reporterKeyword: 신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - contentKeyword: 신고 내용으로 검색 - reportPaths: 신고 경로 (BOARD=게시판, CHAT=채팅, PROFILE=프로필) - reportTypes: 신고 사유 (1=스팸, 2=불법정보, 3=성희롱, 4=욕설/혐오, 5=개인정보노출, 6=불쾌한표현) - startDate/endDate: 신고 날짜 범위 (yyyy-MM-dd\'T\'HH:mm:ss) - reportCountMin/Max/Exact: 누적 신고 횟수 필터 - isDeleted: 게시물 삭제 여부 (true/false) - banTypes: 제재 상태 (NONE, WARNING, BAN_1D, BAN_3D, BAN_5D, BAN_1W, BAN_2W, BAN_1M, PERMANENT) - sortOrder: 정렬 순서 (LATEST: 최신순, OLDEST: 오래된순) - 기본값: LATEST - page/size: 페이징 (예: page=0&size=10)  **사용 예시:** /api/v2/report/list?reportedMemberKeyword=홍길동#KR1&reportTypes=1,4&startDate=2024-01-01T00:00:00&banTypes=WARNING&page=0&size=10
		 * @summary 신고 목록 조회 (관리자 전용)
		 * @param {Pageable} pageable
		 * @param {string} [reportedMemberKeyword]
		 * @param {string} [reporterKeyword]
		 * @param {string} [contentKeyword]
		 * @param {ReportPath} [reportPaths] 신고 경로
		 * @param {ReportType} [reportTypes] 신고 유형 (1&#x3D;스팸, 2&#x3D;불법정보, 3&#x3D;성희롱, 4&#x3D;욕설/혐오, 5&#x3D;개인정보노출, 6&#x3D;불쾌한표현)
		 * @param {string} [startDate]
		 * @param {string} [endDate]
		 * @param {number} [reportCountMin]
		 * @param {number} [reportCountMax]
		 * @param {number} [reportCountExact]
		 * @param {boolean} [isDeleted]
		 * @param {BanType} [banTypes] 제재 상태
		 * @param {ReportSortOrder} [sortOrder] 정렬 순서
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getReportList(
			pageable: Pageable,
			reportedMemberKeyword?: string,
			reporterKeyword?: string,
			contentKeyword?: string,
			reportPaths?: ReportPath,
			reportTypes?: ReportType,
			startDate?: string,
			endDate?: string,
			reportCountMin?: number,
			reportCountMax?: number,
			reportCountExact?: number,
			isDeleted?: boolean,
			banTypes?: BanType,
			sortOrder?: ReportSortOrder,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseReportPageResponse> {
			return localVarFp
				.getReportList(
					pageable,
					reportedMemberKeyword,
					reporterKeyword,
					contentKeyword,
					reportPaths,
					reportTypes,
					startDate,
					endDate,
					reportCountMin,
					reportCountMax,
					reportCountExact,
					isDeleted,
					banTypes,
					sortOrder,
					options,
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 관리자가 신고를 처리하여 제재를 적용하는 API입니다.  **Request Body:** - banType: 적용할 제재 유형 (필수)   - NONE: 제재 없음   - WARNING: 경고   - BAN_1D: 1일 정지   - BAN_3D: 3일 정지   - BAN_5D: 5일 정지   - BAN_1W: 1주 정지   - BAN_2W: 2주 정지   - BAN_1M: 1개월 정지   - PERMANENT: 영구 정지 - processReason: 제재 사유 (선택사항)
		 * @summary 신고 처리 (관리자 전용)
		 * @param {number} reportId 처리할 신고의 ID입니다.
		 * @param {ReportProcessRequest} reportProcessRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		processReport(
			reportId: number,
			reportProcessRequest: ReportProcessRequest,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseReportProcessResponse> {
			return localVarFp
				.processReport(reportId, reportProcessRequest, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
	/**
	 * 대상 회원에 대한 신고를 등록하는 API 입니다.
	 * @summary 신고 등록 API
	 * @param {number} memberId 신고할 대상 회원의 id 입니다.
	 * @param {ReportRequest} reportRequest
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReportApi
	 */
	public addReport(
		memberId: number,
		reportRequest: ReportRequest,
		options?: RawAxiosRequestConfig,
	) {
		return ReportApiFp(this.configuration)
			.addReport(memberId, reportRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 관리자가 신고된 게시글을 삭제하는 API입니다.  해당 신고와 연관된 게시글이 있는 경우 삭제 처리되며, 게시글이 없는 경우 적절한 메시지가 반환됩니다.  **반환 메시지:** - 성공: \"신고된 게시글 삭제가 완료되었습니다\" - 게시글 없음: \"삭제할 게시글이 존재하지 않습니다\"
	 * @summary 신고된 게시글 삭제 (관리자 전용)
	 * @param {number} reportId 삭제할 게시글과 연관된 신고의 ID입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReportApi
	 */
	public deleteReportedPost(reportId: number, options?: RawAxiosRequestConfig) {
		return ReportApiFp(this.configuration)
			.deleteReportedPost(reportId, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 관리자만 접근 가능한 신고 목록 고급 필터링 조회 API입니다.  **필터링 옵션:** - reportedMemberKeyword: 피신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - reporterKeyword: 신고자 검색 (게임명, 태그, 게임명#태그 형식 지원) - contentKeyword: 신고 내용으로 검색 - reportPaths: 신고 경로 (BOARD=게시판, CHAT=채팅, PROFILE=프로필) - reportTypes: 신고 사유 (1=스팸, 2=불법정보, 3=성희롱, 4=욕설/혐오, 5=개인정보노출, 6=불쾌한표현) - startDate/endDate: 신고 날짜 범위 (yyyy-MM-dd\'T\'HH:mm:ss) - reportCountMin/Max/Exact: 누적 신고 횟수 필터 - isDeleted: 게시물 삭제 여부 (true/false) - banTypes: 제재 상태 (NONE, WARNING, BAN_1D, BAN_3D, BAN_5D, BAN_1W, BAN_2W, BAN_1M, PERMANENT) - sortOrder: 정렬 순서 (LATEST: 최신순, OLDEST: 오래된순) - 기본값: LATEST - page/size: 페이징 (예: page=0&size=10)  **사용 예시:** /api/v2/report/list?reportedMemberKeyword=홍길동#KR1&reportTypes=1,4&startDate=2024-01-01T00:00:00&banTypes=WARNING&page=0&size=10
	 * @summary 신고 목록 조회 (관리자 전용)
	 * @param {Pageable} pageable
	 * @param {string} [reportedMemberKeyword]
	 * @param {string} [reporterKeyword]
	 * @param {string} [contentKeyword]
	 * @param {ReportPath} [reportPaths] 신고 경로
	 * @param {ReportType} [reportTypes] 신고 유형 (1&#x3D;스팸, 2&#x3D;불법정보, 3&#x3D;성희롱, 4&#x3D;욕설/혐오, 5&#x3D;개인정보노출, 6&#x3D;불쾌한표현)
	 * @param {string} [startDate]
	 * @param {string} [endDate]
	 * @param {number} [reportCountMin]
	 * @param {number} [reportCountMax]
	 * @param {number} [reportCountExact]
	 * @param {boolean} [isDeleted]
	 * @param {BanType} [banTypes] 제재 상태
	 * @param {ReportSortOrder} [sortOrder] 정렬 순서
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReportApi
	 */
	public getReportList(
		pageable: Pageable,
		reportedMemberKeyword?: string,
		reporterKeyword?: string,
		contentKeyword?: string,
		reportPaths?: ReportPath,
		reportTypes?: ReportType,
		startDate?: string,
		endDate?: string,
		reportCountMin?: number,
		reportCountMax?: number,
		reportCountExact?: number,
		isDeleted?: boolean,
		banTypes?: BanType,
		sortOrder?: ReportSortOrder,
		options?: RawAxiosRequestConfig,
	) {
		return ReportApiFp(this.configuration)
			.getReportList(
				pageable,
				reportedMemberKeyword,
				reporterKeyword,
				contentKeyword,
				reportPaths,
				reportTypes,
				startDate,
				endDate,
				reportCountMin,
				reportCountMax,
				reportCountExact,
				isDeleted,
				banTypes,
				sortOrder,
				options,
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 관리자가 신고를 처리하여 제재를 적용하는 API입니다.  **Request Body:** - banType: 적용할 제재 유형 (필수)   - NONE: 제재 없음   - WARNING: 경고   - BAN_1D: 1일 정지   - BAN_3D: 3일 정지   - BAN_5D: 5일 정지   - BAN_1W: 1주 정지   - BAN_2W: 2주 정지   - BAN_1M: 1개월 정지   - PERMANENT: 영구 정지 - processReason: 제재 사유 (선택사항)
	 * @summary 신고 처리 (관리자 전용)
	 * @param {number} reportId 처리할 신고의 ID입니다.
	 * @param {ReportProcessRequest} reportProcessRequest
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReportApi
	 */
	public processReport(
		reportId: number,
		reportProcessRequest: ReportProcessRequest,
		options?: RawAxiosRequestConfig,
	) {
		return ReportApiFp(this.configuration)
			.processReport(reportId, reportProcessRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
