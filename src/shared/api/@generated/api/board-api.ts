/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseBoardBumpResponse } from '../models';
// @ts-ignore
import type { ApiResponseBoardByIdResponse } from '../models';
// @ts-ignore
import type { ApiResponseBoardByIdResponseForMember } from '../models';
// @ts-ignore
import type { ApiResponseBoardCursorResponse } from '../models';
// @ts-ignore
import type { ApiResponseBoardInsertResponse } from '../models';
// @ts-ignore
import type { ApiResponseBoardResponse } from '../models';
// @ts-ignore
import type { ApiResponseBoardUpdateResponse } from '../models';
// @ts-ignore
import type { ApiResponseMyBoardCursorResponse } from '../models';
// @ts-ignore
import type { ApiResponseMyBoardResponse } from '../models';
// @ts-ignore
import type { ApiResponseString } from '../models';
// @ts-ignore
import type { BoardInsertRequest } from '../models';
// @ts-ignore
import type { BoardUpdateRequest } from '../models';
// @ts-ignore
import type { GameMode } from '../models';
// @ts-ignore
import type { GuestBoardDeleteRequest } from '../models';
// @ts-ignore
import type { GuestBoardInsertRequest } from '../models';
// @ts-ignore
import type { GuestBoardUpdateRequest } from '../models';
// @ts-ignore
import type { Mike } from '../models';
// @ts-ignore
import type { Position } from '../models';
// @ts-ignore
import type { Tier } from '../models';
/**
 * BoardApi - axios parameter creator
 * @export
 */
export const BoardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 게시판에서 글을 삭제하는 API 입니다.
         * @summary 게시판 글 삭제 API
         * @param {number} boardId 삭제할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (boardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('_delete', 'boardId', boardId)
            const localVarPath = `/api/v2/posts/{boardId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
         * @summary 게시판 글 작성 API
         * @param {BoardInsertRequest} boardInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardInsert: async (boardInsertRequest: BoardInsertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardInsertRequest' is not null or undefined
            assertParamExists('boardInsert', 'boardInsertRequest', boardInsertRequest)
            const localVarPath = `/api/v2/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardInsertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판 글 목록을 조회하는 API 입니다. 필터링을 원하면 각 파라미터를 입력하세요.
         * @summary 게시판 글 목록 조회 API
         * @param {number} page 
         * @param {GameMode} [gameMode] (선택) 게임 모드를 입력해주세요. &lt; 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM &gt;
         * @param {Tier} [tier] (선택) 티어를 선택해주세요.
         * @param {Position} [mainP] (선택) 주 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {Position} [subP] (선택) 부 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {Mike} [mike] (선택) 마이크 여부를 선택해주세요.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardList: async (page: number, gameMode?: GameMode, tier?: Tier, mainP?: Position, subP?: Position, mike?: Mike, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('boardList', 'page', page)
            const localVarPath = `/api/v2/posts/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (gameMode !== undefined) {
                localVarQueryParameter['gameMode'] = gameMode;
            }

            if (tier !== undefined) {
                localVarQueryParameter['tier'] = tier;
            }

            if (mainP !== undefined) {
                localVarQueryParameter['mainP'] = mainP;
            }

            if (subP !== undefined) {
                localVarQueryParameter['subP'] = subP;
            }

            if (mike !== undefined) {
                localVarQueryParameter['mike'] = mike;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판에서 글을 수정하는 API 입니다.
         * @summary 게시판 글 수정 API
         * @param {number} boardId 수정할 게시판 글 id 입니다.
         * @param {BoardUpdateRequest} boardUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardUpdate: async (boardId: number, boardUpdateRequest: BoardUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('boardUpdate', 'boardId', boardId)
            // verify required parameter 'boardUpdateRequest' is not null or undefined
            assertParamExists('boardUpdate', 'boardUpdateRequest', boardUpdateRequest)
            const localVarPath = `/api/v2/posts/{boardId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시글을 끌올하여 상단 노출시키는 API 입니다. 마지막 끌올 후 1시간 제한이 적용됩니다.
         * @summary 게시글 끌올 API
         * @param {number} boardId 끌올할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bumpBoard: async (boardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('bumpBoard', 'boardId', boardId)
            const localVarPath = `/api/v2/posts/{boardId}/bump`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 비회원이 게시판에서 글을 삭제하는 API 입니다.
         * @summary 비회원 게시판 글 삭제 API
         * @param {number} boardId 삭제할 게시판 글 id 입니다.
         * @param {GuestBoardDeleteRequest} guestBoardDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGuestBoard: async (boardId: number, guestBoardDeleteRequest: GuestBoardDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('deleteGuestBoard', 'boardId', boardId)
            // verify required parameter 'guestBoardDeleteRequest' is not null or undefined
            assertParamExists('deleteGuestBoard', 'guestBoardDeleteRequest', guestBoardDeleteRequest)
            const localVarPath = `/api/v2/posts/guest/{boardId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(guestBoardDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판에서 글을 조회하는 API 입니다.
         * @summary 비회원용 게시판 글 조회 API
         * @param {number} boardId 조회할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardById: async (boardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('getBoardById', 'boardId', boardId)
            const localVarPath = `/api/v2/posts/list/{boardId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 게시판에서 글을 조회하는 API 입니다.
         * @summary 회원용 게시판 글 조회 API
         * @param {number} boardId 조회할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdForMember: async (boardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('getBoardByIdForMember', 'boardId', boardId)
            const localVarPath = `/api/v2/posts/member/list/{boardId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 커서 기반(무한 스크롤)으로 게시판 글 목록을 조회하는 API 입니다. 최신 글부터 순차적으로 내려가며, 커서와 cursorId를 이용해 다음 페이지를 조회할 수 있습니다. 필터링을 원하면 각 파라미터를 입력하세요.
         * @summary 커서 기반 게시판 글 목록 조회 API
         * @param {string} [cursor] (선택) 페이징을 위한 커서, ISO 8601 형식의 LocalDateTime을 보내주세요. 없으면 최신글부터 조회합니다.
         * @param {number} [cursorId] (선택) 커서와 동일한 activityTime을 가진 게시글 중 마지막 게시글의 id. 커서 페이징에 사용됩니다.
         * @param {GameMode} [gameMode] (선택) 게임 모드를 입력해주세요. &lt; 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM &gt;
         * @param {Tier} [tier] (선택) 티어를 선택해주세요.
         * @param {Position} [position1] (선택) 주 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {Position} [position2] (선택) 부 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsWithCursor: async (cursor?: string, cursorId?: number, gameMode?: GameMode, tier?: Tier, position1?: Position, position2?: Position, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/posts/cursor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = (cursor as any instanceof Date) ?
                    (cursor as any).toISOString() :
                    cursor;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['cursorId'] = cursorId;
            }

            if (gameMode !== undefined) {
                localVarQueryParameter['gameMode'] = gameMode;
            }

            if (tier !== undefined) {
                localVarQueryParameter['tier'] = tier;
            }

            if (position1 !== undefined) {
                localVarQueryParameter['position1'] = position1;
            }

            if (position2 !== undefined) {
                localVarQueryParameter['position2'] = position2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 모바일에서 내가 작성한 게시판 글을 조회하는 API 입니다.
         * @summary 내가 작성한 게시판 글 목록 조회 API/모바일
         * @param {string} [cursor] 페이징을 위한 커서, ISO 8601 형식의 LocalDateTime을 보내주세요. 보내지 않으면 가장 최근 게시물 10개를 조회합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyBoardCursorList: async (cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/posts/my/cursor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = (cursor as any instanceof Date) ?
                    (cursor as any).toISOString() :
                    cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 내가 작성한 게시판 글을 조회하는 API 입니다. 페이지 당 10개의 게시물이 표시됩니다.
         * @summary 내가 작성한 게시판 글 목록 조회 API
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyBoardList: async (page: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getMyBoardList', 'page', page)
            const localVarPath = `/api/v2/posts/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 비회원이 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
         * @summary 비회원 게시판 글 작성 API
         * @param {GuestBoardInsertRequest} guestBoardInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestBoardInsert: async (guestBoardInsertRequest: GuestBoardInsertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestBoardInsertRequest' is not null or undefined
            assertParamExists('guestBoardInsert', 'guestBoardInsertRequest', guestBoardInsertRequest)
            const localVarPath = `/api/v2/posts/guest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(guestBoardInsertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 비회원이 게시판에서 글을 수정하는 API 입니다.
         * @summary 비회원 게시판 글 수정 API
         * @param {number} boardId 수정할 게시판 글 id 입니다.
         * @param {GuestBoardUpdateRequest} guestBoardUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestBoardUpdate: async (boardId: number, guestBoardUpdateRequest: GuestBoardUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('guestBoardUpdate', 'boardId', boardId)
            // verify required parameter 'guestBoardUpdateRequest' is not null or undefined
            assertParamExists('guestBoardUpdate', 'guestBoardUpdateRequest', guestBoardUpdateRequest)
            const localVarPath = `/api/v2/posts/guest/{boardId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(guestBoardUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardApi - functional programming interface
 * @export
 */
export const BoardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardApiAxiosParamCreator(configuration)
    return {
        /**
         * 게시판에서 글을 삭제하는 API 입니다.
         * @summary 게시판 글 삭제 API
         * @param {number} boardId 삭제할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(boardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(boardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
         * @summary 게시판 글 작성 API
         * @param {BoardInsertRequest} boardInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardInsert(boardInsertRequest: BoardInsertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoardInsertResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardInsert(boardInsertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.boardInsert']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판 글 목록을 조회하는 API 입니다. 필터링을 원하면 각 파라미터를 입력하세요.
         * @summary 게시판 글 목록 조회 API
         * @param {number} page 
         * @param {GameMode} [gameMode] (선택) 게임 모드를 입력해주세요. &lt; 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM &gt;
         * @param {Tier} [tier] (선택) 티어를 선택해주세요.
         * @param {Position} [mainP] (선택) 주 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {Position} [subP] (선택) 부 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {Mike} [mike] (선택) 마이크 여부를 선택해주세요.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardList(page: number, gameMode?: GameMode, tier?: Tier, mainP?: Position, subP?: Position, mike?: Mike, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardList(page, gameMode, tier, mainP, subP, mike, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.boardList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판에서 글을 수정하는 API 입니다.
         * @summary 게시판 글 수정 API
         * @param {number} boardId 수정할 게시판 글 id 입니다.
         * @param {BoardUpdateRequest} boardUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardUpdate(boardId: number, boardUpdateRequest: BoardUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoardUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardUpdate(boardId, boardUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.boardUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시글을 끌올하여 상단 노출시키는 API 입니다. 마지막 끌올 후 1시간 제한이 적용됩니다.
         * @summary 게시글 끌올 API
         * @param {number} boardId 끌올할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bumpBoard(boardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoardBumpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bumpBoard(boardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.bumpBoard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 비회원이 게시판에서 글을 삭제하는 API 입니다.
         * @summary 비회원 게시판 글 삭제 API
         * @param {number} boardId 삭제할 게시판 글 id 입니다.
         * @param {GuestBoardDeleteRequest} guestBoardDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGuestBoard(boardId: number, guestBoardDeleteRequest: GuestBoardDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGuestBoard(boardId, guestBoardDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.deleteGuestBoard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판에서 글을 조회하는 API 입니다.
         * @summary 비회원용 게시판 글 조회 API
         * @param {number} boardId 조회할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardById(boardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoardByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardById(boardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.getBoardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 게시판에서 글을 조회하는 API 입니다.
         * @summary 회원용 게시판 글 조회 API
         * @param {number} boardId 조회할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardByIdForMember(boardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoardByIdResponseForMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardByIdForMember(boardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.getBoardByIdForMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 커서 기반(무한 스크롤)으로 게시판 글 목록을 조회하는 API 입니다. 최신 글부터 순차적으로 내려가며, 커서와 cursorId를 이용해 다음 페이지를 조회할 수 있습니다. 필터링을 원하면 각 파라미터를 입력하세요.
         * @summary 커서 기반 게시판 글 목록 조회 API
         * @param {string} [cursor] (선택) 페이징을 위한 커서, ISO 8601 형식의 LocalDateTime을 보내주세요. 없으면 최신글부터 조회합니다.
         * @param {number} [cursorId] (선택) 커서와 동일한 activityTime을 가진 게시글 중 마지막 게시글의 id. 커서 페이징에 사용됩니다.
         * @param {GameMode} [gameMode] (선택) 게임 모드를 입력해주세요. &lt; 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM &gt;
         * @param {Tier} [tier] (선택) 티어를 선택해주세요.
         * @param {Position} [position1] (선택) 주 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {Position} [position2] (선택) 부 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardsWithCursor(cursor?: string, cursorId?: number, gameMode?: GameMode, tier?: Tier, position1?: Position, position2?: Position, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoardCursorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardsWithCursor(cursor, cursorId, gameMode, tier, position1, position2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.getBoardsWithCursor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 모바일에서 내가 작성한 게시판 글을 조회하는 API 입니다.
         * @summary 내가 작성한 게시판 글 목록 조회 API/모바일
         * @param {string} [cursor] 페이징을 위한 커서, ISO 8601 형식의 LocalDateTime을 보내주세요. 보내지 않으면 가장 최근 게시물 10개를 조회합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyBoardCursorList(cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMyBoardCursorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyBoardCursorList(cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.getMyBoardCursorList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 내가 작성한 게시판 글을 조회하는 API 입니다. 페이지 당 10개의 게시물이 표시됩니다.
         * @summary 내가 작성한 게시판 글 목록 조회 API
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyBoardList(page: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMyBoardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyBoardList(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.getMyBoardList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 비회원이 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
         * @summary 비회원 게시판 글 작성 API
         * @param {GuestBoardInsertRequest} guestBoardInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guestBoardInsert(guestBoardInsertRequest: GuestBoardInsertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoardInsertResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.guestBoardInsert(guestBoardInsertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.guestBoardInsert']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 비회원이 게시판에서 글을 수정하는 API 입니다.
         * @summary 비회원 게시판 글 수정 API
         * @param {number} boardId 수정할 게시판 글 id 입니다.
         * @param {GuestBoardUpdateRequest} guestBoardUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guestBoardUpdate(boardId: number, guestBoardUpdateRequest: GuestBoardUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoardUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.guestBoardUpdate(boardId, guestBoardUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardApi.guestBoardUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BoardApi - factory interface
 * @export
 */
export const BoardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardApiFp(configuration)
    return {
        /**
         * 게시판에서 글을 삭제하는 API 입니다.
         * @summary 게시판 글 삭제 API
         * @param {number} boardId 삭제할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(boardId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp._delete(boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
         * @summary 게시판 글 작성 API
         * @param {BoardInsertRequest} boardInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardInsert(boardInsertRequest: BoardInsertRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoardInsertResponse> {
            return localVarFp.boardInsert(boardInsertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판 글 목록을 조회하는 API 입니다. 필터링을 원하면 각 파라미터를 입력하세요.
         * @summary 게시판 글 목록 조회 API
         * @param {number} page 
         * @param {GameMode} [gameMode] (선택) 게임 모드를 입력해주세요. &lt; 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM &gt;
         * @param {Tier} [tier] (선택) 티어를 선택해주세요.
         * @param {Position} [mainP] (선택) 주 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {Position} [subP] (선택) 부 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {Mike} [mike] (선택) 마이크 여부를 선택해주세요.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardList(page: number, gameMode?: GameMode, tier?: Tier, mainP?: Position, subP?: Position, mike?: Mike, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoardResponse> {
            return localVarFp.boardList(page, gameMode, tier, mainP, subP, mike, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판에서 글을 수정하는 API 입니다.
         * @summary 게시판 글 수정 API
         * @param {number} boardId 수정할 게시판 글 id 입니다.
         * @param {BoardUpdateRequest} boardUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardUpdate(boardId: number, boardUpdateRequest: BoardUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoardUpdateResponse> {
            return localVarFp.boardUpdate(boardId, boardUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시글을 끌올하여 상단 노출시키는 API 입니다. 마지막 끌올 후 1시간 제한이 적용됩니다.
         * @summary 게시글 끌올 API
         * @param {number} boardId 끌올할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bumpBoard(boardId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoardBumpResponse> {
            return localVarFp.bumpBoard(boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 비회원이 게시판에서 글을 삭제하는 API 입니다.
         * @summary 비회원 게시판 글 삭제 API
         * @param {number} boardId 삭제할 게시판 글 id 입니다.
         * @param {GuestBoardDeleteRequest} guestBoardDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGuestBoard(boardId: number, guestBoardDeleteRequest: GuestBoardDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.deleteGuestBoard(boardId, guestBoardDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판에서 글을 조회하는 API 입니다.
         * @summary 비회원용 게시판 글 조회 API
         * @param {number} boardId 조회할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardById(boardId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoardByIdResponse> {
            return localVarFp.getBoardById(boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 게시판에서 글을 조회하는 API 입니다.
         * @summary 회원용 게시판 글 조회 API
         * @param {number} boardId 조회할 게시판 글 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdForMember(boardId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoardByIdResponseForMember> {
            return localVarFp.getBoardByIdForMember(boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 커서 기반(무한 스크롤)으로 게시판 글 목록을 조회하는 API 입니다. 최신 글부터 순차적으로 내려가며, 커서와 cursorId를 이용해 다음 페이지를 조회할 수 있습니다. 필터링을 원하면 각 파라미터를 입력하세요.
         * @summary 커서 기반 게시판 글 목록 조회 API
         * @param {string} [cursor] (선택) 페이징을 위한 커서, ISO 8601 형식의 LocalDateTime을 보내주세요. 없으면 최신글부터 조회합니다.
         * @param {number} [cursorId] (선택) 커서와 동일한 activityTime을 가진 게시글 중 마지막 게시글의 id. 커서 페이징에 사용됩니다.
         * @param {GameMode} [gameMode] (선택) 게임 모드를 입력해주세요. &lt; 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM &gt;
         * @param {Tier} [tier] (선택) 티어를 선택해주세요.
         * @param {Position} [position1] (선택) 주 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {Position} [position2] (선택) 부 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsWithCursor(cursor?: string, cursorId?: number, gameMode?: GameMode, tier?: Tier, position1?: Position, position2?: Position, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoardCursorResponse> {
            return localVarFp.getBoardsWithCursor(cursor, cursorId, gameMode, tier, position1, position2, options).then((request) => request(axios, basePath));
        },
        /**
         * 모바일에서 내가 작성한 게시판 글을 조회하는 API 입니다.
         * @summary 내가 작성한 게시판 글 목록 조회 API/모바일
         * @param {string} [cursor] 페이징을 위한 커서, ISO 8601 형식의 LocalDateTime을 보내주세요. 보내지 않으면 가장 최근 게시물 10개를 조회합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyBoardCursorList(cursor?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMyBoardCursorResponse> {
            return localVarFp.getMyBoardCursorList(cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 내가 작성한 게시판 글을 조회하는 API 입니다. 페이지 당 10개의 게시물이 표시됩니다.
         * @summary 내가 작성한 게시판 글 목록 조회 API
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyBoardList(page: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMyBoardResponse> {
            return localVarFp.getMyBoardList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 비회원이 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
         * @summary 비회원 게시판 글 작성 API
         * @param {GuestBoardInsertRequest} guestBoardInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestBoardInsert(guestBoardInsertRequest: GuestBoardInsertRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoardInsertResponse> {
            return localVarFp.guestBoardInsert(guestBoardInsertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 비회원이 게시판에서 글을 수정하는 API 입니다.
         * @summary 비회원 게시판 글 수정 API
         * @param {number} boardId 수정할 게시판 글 id 입니다.
         * @param {GuestBoardUpdateRequest} guestBoardUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guestBoardUpdate(boardId: number, guestBoardUpdateRequest: GuestBoardUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoardUpdateResponse> {
            return localVarFp.guestBoardUpdate(boardId, guestBoardUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardApi - object-oriented interface
 * @export
 * @class BoardApi
 * @extends {BaseAPI}
 */
export class BoardApi extends BaseAPI {
    /**
     * 게시판에서 글을 삭제하는 API 입니다.
     * @summary 게시판 글 삭제 API
     * @param {number} boardId 삭제할 게시판 글 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public _delete(boardId: number, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration)._delete(boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
     * @summary 게시판 글 작성 API
     * @param {BoardInsertRequest} boardInsertRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public boardInsert(boardInsertRequest: BoardInsertRequest, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).boardInsert(boardInsertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판 글 목록을 조회하는 API 입니다. 필터링을 원하면 각 파라미터를 입력하세요.
     * @summary 게시판 글 목록 조회 API
     * @param {number} page 
     * @param {GameMode} [gameMode] (선택) 게임 모드를 입력해주세요. &lt; 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM &gt;
     * @param {Tier} [tier] (선택) 티어를 선택해주세요.
     * @param {Position} [mainP] (선택) 주 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
     * @param {Position} [subP] (선택) 부 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
     * @param {Mike} [mike] (선택) 마이크 여부를 선택해주세요.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public boardList(page: number, gameMode?: GameMode, tier?: Tier, mainP?: Position, subP?: Position, mike?: Mike, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).boardList(page, gameMode, tier, mainP, subP, mike, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판에서 글을 수정하는 API 입니다.
     * @summary 게시판 글 수정 API
     * @param {number} boardId 수정할 게시판 글 id 입니다.
     * @param {BoardUpdateRequest} boardUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public boardUpdate(boardId: number, boardUpdateRequest: BoardUpdateRequest, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).boardUpdate(boardId, boardUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시글을 끌올하여 상단 노출시키는 API 입니다. 마지막 끌올 후 1시간 제한이 적용됩니다.
     * @summary 게시글 끌올 API
     * @param {number} boardId 끌올할 게시판 글 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public bumpBoard(boardId: number, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).bumpBoard(boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 비회원이 게시판에서 글을 삭제하는 API 입니다.
     * @summary 비회원 게시판 글 삭제 API
     * @param {number} boardId 삭제할 게시판 글 id 입니다.
     * @param {GuestBoardDeleteRequest} guestBoardDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public deleteGuestBoard(boardId: number, guestBoardDeleteRequest: GuestBoardDeleteRequest, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).deleteGuestBoard(boardId, guestBoardDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판에서 글을 조회하는 API 입니다.
     * @summary 비회원용 게시판 글 조회 API
     * @param {number} boardId 조회할 게시판 글 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public getBoardById(boardId: number, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).getBoardById(boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 게시판에서 글을 조회하는 API 입니다.
     * @summary 회원용 게시판 글 조회 API
     * @param {number} boardId 조회할 게시판 글 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public getBoardByIdForMember(boardId: number, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).getBoardByIdForMember(boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 커서 기반(무한 스크롤)으로 게시판 글 목록을 조회하는 API 입니다. 최신 글부터 순차적으로 내려가며, 커서와 cursorId를 이용해 다음 페이지를 조회할 수 있습니다. 필터링을 원하면 각 파라미터를 입력하세요.
     * @summary 커서 기반 게시판 글 목록 조회 API
     * @param {string} [cursor] (선택) 페이징을 위한 커서, ISO 8601 형식의 LocalDateTime을 보내주세요. 없으면 최신글부터 조회합니다.
     * @param {number} [cursorId] (선택) 커서와 동일한 activityTime을 가진 게시글 중 마지막 게시글의 id. 커서 페이징에 사용됩니다.
     * @param {GameMode} [gameMode] (선택) 게임 모드를 입력해주세요. &lt; 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM &gt;
     * @param {Tier} [tier] (선택) 티어를 선택해주세요.
     * @param {Position} [position1] (선택) 주 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
     * @param {Position} [position2] (선택) 부 포지션을 입력해주세요. &lt; 전체: ANY, 탑: TOP, 정글: JUNGLE, 미드: MID, 원딜: ADC, 서포터: SUP &gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public getBoardsWithCursor(cursor?: string, cursorId?: number, gameMode?: GameMode, tier?: Tier, position1?: Position, position2?: Position, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).getBoardsWithCursor(cursor, cursorId, gameMode, tier, position1, position2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 모바일에서 내가 작성한 게시판 글을 조회하는 API 입니다.
     * @summary 내가 작성한 게시판 글 목록 조회 API/모바일
     * @param {string} [cursor] 페이징을 위한 커서, ISO 8601 형식의 LocalDateTime을 보내주세요. 보내지 않으면 가장 최근 게시물 10개를 조회합니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public getMyBoardCursorList(cursor?: string, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).getMyBoardCursorList(cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 내가 작성한 게시판 글을 조회하는 API 입니다. 페이지 당 10개의 게시물이 표시됩니다.
     * @summary 내가 작성한 게시판 글 목록 조회 API
     * @param {number} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public getMyBoardList(page: number, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).getMyBoardList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 비회원이 게시판에서 글을 작성하는 API 입니다. 프로필이미지 값: 1~8, gameMode: < 빠른대전: FAST, 솔로랭크: SOLO, 자유랭크: FREE, 칼바람 나락: ARAM >, 주 포지션, 부포지션, 희망 포지션: < TOP, JUNGLE, MID, ADC, SUP, ANY >, 마이크 여부: < AVAILABLE, UNAVAILABLE >, 게임 스타일 리스트: 1~3개 선택 가능
     * @summary 비회원 게시판 글 작성 API
     * @param {GuestBoardInsertRequest} guestBoardInsertRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public guestBoardInsert(guestBoardInsertRequest: GuestBoardInsertRequest, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).guestBoardInsert(guestBoardInsertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 비회원이 게시판에서 글을 수정하는 API 입니다.
     * @summary 비회원 게시판 글 수정 API
     * @param {number} boardId 수정할 게시판 글 id 입니다.
     * @param {GuestBoardUpdateRequest} guestBoardUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApi
     */
    public guestBoardUpdate(boardId: number, guestBoardUpdateRequest: GuestBoardUpdateRequest, options?: RawAxiosRequestConfig) {
        return BoardApiFp(this.configuration).guestBoardUpdate(boardId, guestBoardUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

