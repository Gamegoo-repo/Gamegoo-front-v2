/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponsePasswordCheckResponse } from '../models';
// @ts-ignore
import type { ApiResponseString } from '../models';
// @ts-ignore
import type { PasswordCheckRequest } from '../models';
// @ts-ignore
import type { PasswordResetRequest } from '../models';
// @ts-ignore
import type { PasswordResetWithVerifyRequest } from '../models';
/**
 * PasswordControllerApi - axios parameter creator
 * @export
 */
export const PasswordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API for checking password
         * @summary 비밀번호 확인 API 입니다.
         * @param {PasswordCheckRequest} passwordCheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPassword: async (passwordCheckRequest: PasswordCheckRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordCheckRequest' is not null or undefined
            assertParamExists('checkPassword', 'passwordCheckRequest', passwordCheckRequest)
            const localVarPath = `/api/v2/password/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordCheckRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for reseting password JWT X
         * @summary 비밀번호 재설정 API 입니다. JWT X
         * @param {PasswordResetWithVerifyRequest} passwordResetWithVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (passwordResetWithVerifyRequest: PasswordResetWithVerifyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordResetWithVerifyRequest' is not null or undefined
            assertParamExists('resetPassword', 'passwordResetWithVerifyRequest', passwordResetWithVerifyRequest)
            const localVarPath = `/api/v2/password/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetWithVerifyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for reseting password JWT O
         * @summary 비밀번호 재설정 API 입니다. JWT O
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordWithJWT: async (passwordResetRequest: PasswordResetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordResetRequest' is not null or undefined
            assertParamExists('resetPasswordWithJWT', 'passwordResetRequest', passwordResetRequest)
            const localVarPath = `/api/v2/password/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordControllerApi - functional programming interface
 * @export
 */
export const PasswordControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PasswordControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * API for checking password
         * @summary 비밀번호 확인 API 입니다.
         * @param {PasswordCheckRequest} passwordCheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPassword(passwordCheckRequest: PasswordCheckRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePasswordCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPassword(passwordCheckRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordControllerApi.checkPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API for reseting password JWT X
         * @summary 비밀번호 재설정 API 입니다. JWT X
         * @param {PasswordResetWithVerifyRequest} passwordResetWithVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(passwordResetWithVerifyRequest: PasswordResetWithVerifyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(passwordResetWithVerifyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordControllerApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API for reseting password JWT O
         * @summary 비밀번호 재설정 API 입니다. JWT O
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordWithJWT(passwordResetRequest: PasswordResetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordWithJWT(passwordResetRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordControllerApi.resetPasswordWithJWT']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PasswordControllerApi - factory interface
 * @export
 */
export const PasswordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PasswordControllerApiFp(configuration)
    return {
        /**
         * API for checking password
         * @summary 비밀번호 확인 API 입니다.
         * @param {PasswordCheckRequest} passwordCheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPassword(passwordCheckRequest: PasswordCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePasswordCheckResponse> {
            return localVarFp.checkPassword(passwordCheckRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API for reseting password JWT X
         * @summary 비밀번호 재설정 API 입니다. JWT X
         * @param {PasswordResetWithVerifyRequest} passwordResetWithVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(passwordResetWithVerifyRequest: PasswordResetWithVerifyRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.resetPassword(passwordResetWithVerifyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API for reseting password JWT O
         * @summary 비밀번호 재설정 API 입니다. JWT O
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordWithJWT(passwordResetRequest: PasswordResetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.resetPasswordWithJWT(passwordResetRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PasswordControllerApi - object-oriented interface
 * @export
 * @class PasswordControllerApi
 * @extends {BaseAPI}
 */
export class PasswordControllerApi extends BaseAPI {
    /**
     * API for checking password
     * @summary 비밀번호 확인 API 입니다.
     * @param {PasswordCheckRequest} passwordCheckRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordControllerApi
     */
    public checkPassword(passwordCheckRequest: PasswordCheckRequest, options?: RawAxiosRequestConfig) {
        return PasswordControllerApiFp(this.configuration).checkPassword(passwordCheckRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API for reseting password JWT X
     * @summary 비밀번호 재설정 API 입니다. JWT X
     * @param {PasswordResetWithVerifyRequest} passwordResetWithVerifyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordControllerApi
     */
    public resetPassword(passwordResetWithVerifyRequest: PasswordResetWithVerifyRequest, options?: RawAxiosRequestConfig) {
        return PasswordControllerApiFp(this.configuration).resetPassword(passwordResetWithVerifyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API for reseting password JWT O
     * @summary 비밀번호 재설정 API 입니다. JWT O
     * @param {PasswordResetRequest} passwordResetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordControllerApi
     */
    public resetPasswordWithJWT(passwordResetRequest: PasswordResetRequest, options?: RawAxiosRequestConfig) {
        return PasswordControllerApiFp(this.configuration).resetPasswordWithJWT(passwordResetRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

