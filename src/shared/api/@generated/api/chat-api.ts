/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from "../common";
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	type RequestArgs,
	BaseAPI,
	RequiredError,
	operationServerMap,
} from "../base";
// @ts-ignore
import type { ApiResponseChatMessageListResponse } from "../models";
// @ts-ignore
import type { ApiResponseChatroomListResponse } from "../models";
// @ts-ignore
import type { ApiResponseEnterChatroomResponse } from "../models";
// @ts-ignore
import type { ApiResponseListString } from "../models";
// @ts-ignore
import type { ApiResponseObject } from "../models";
// @ts-ignore
import type { ApiResponseString } from "../models";
/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (
	configuration?: Configuration,
) {
	return {
		/**
		 * 특정 채팅방에 입장하는 API 입니다. 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.
		 * @summary 채팅방 입장 API
		 * @param {string} chatroomUuid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		enterChatroom: async (
			chatroomUuid: string,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'chatroomUuid' is not null or undefined
			assertParamExists("enterChatroom", "chatroomUuid", chatroomUuid);
			const localVarPath = `/api/v2/chat/{chatroomUuid}/enter`.replace(
				`{${"chatroomUuid"}}`,
				encodeURIComponent(String(chatroomUuid)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 채팅방 나가기 API 입니다.
		 * @summary 채팅방 나가기 API
		 * @param {string} chatroomUuid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		exitChatroom: async (
			chatroomUuid: string,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'chatroomUuid' is not null or undefined
			assertParamExists("exitChatroom", "chatroomUuid", chatroomUuid);
			const localVarPath = `/api/v2/chat/{chatroomUuid}/exit`.replace(
				`{${"chatroomUuid"}}`,
				encodeURIComponent(String(chatroomUuid)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 특정 채팅방의 메시지 내역을 조회하는 API 입니다.  cursor 파라미터를 보내면, 해당 timestamp 이전에 전송된 메시지 최대 20개를 조회합니다.  cursor 파라미터를 보내지 않으면, 해당 채팅방의 가장 최근 메시지 내역을 조회합니다.
		 * @summary 채팅 내역 조회 API
		 * @param {string} chatroomUuid
		 * @param {number} [cursor] 페이징을 위한 커서, 13자리 timestamp integer를 보내주세요. (UTC 기준)
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getChatMessages: async (
			chatroomUuid: string,
			cursor?: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'chatroomUuid' is not null or undefined
			assertParamExists("getChatMessages", "chatroomUuid", chatroomUuid);
			const localVarPath = `/api/v2/chat/{chatroomUuid}/messages`.replace(
				`{${"chatroomUuid"}}`,
				encodeURIComponent(String(chatroomUuid)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (cursor !== undefined) {
				localVarQueryParameter["cursor"] = cursor;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 회원이 속한 채팅방 목록을 조회하는 API 입니다.
		 * @summary 채팅방 목록 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getChatroom: async (
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v2/chatroom`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 안읽은 메시지가 속한 채팅방의 uuid 목록을 조회하는 API 입니다.
		 * @summary 안읽은 채팅방 uuid 목록 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getUnreadChatroomUuid: async (
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v2/chat/unread`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 특정 채팅방의 메시지를 읽음 처리하는 API 입니다.
		 * @summary 채팅 메시지 읽음 처리 API
		 * @param {string} chatroomUuid
		 * @param {number} [timestamp] 특정 메시지를 읽음 처리하는 경우, 그 메시지의 timestamp를 함께 보내주세요.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		readChatMessage: async (
			chatroomUuid: string,
			timestamp?: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'chatroomUuid' is not null or undefined
			assertParamExists("readChatMessage", "chatroomUuid", chatroomUuid);
			const localVarPath = `/api/v2/chat/{chatroomUuid}/read`.replace(
				`{${"chatroomUuid"}}`,
				encodeURIComponent(String(chatroomUuid)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (timestamp !== undefined) {
				localVarQueryParameter["timestamp"] = timestamp;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 특정 글에서 말 걸어보기 버튼을 통해 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 리턴합니다.
		 * @summary 특정 글을 통한 채팅방 시작 API
		 * @param {number} boardId 말 걸어보기 버튼을 누른 게시글의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		startChatroomByBoardId: async (
			boardId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'boardId' is not null or undefined
			assertParamExists("startChatroomByBoardId", "boardId", boardId);
			const localVarPath = `/api/v2/chat/start/board/{boardId}`.replace(
				`{${"boardId"}}`,
				encodeURIComponent(String(boardId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 특정 대상 회원과의 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 반환합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 반환합니다.
		 * @summary 특정 회원과 채팅방 시작 API
		 * @param {number} memberId 채팅방을 시작할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		startChatroomByMemberId: async (
			memberId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("startChatroomByMemberId", "memberId", memberId);
			const localVarPath = `/api/v2/chat/start/member/{memberId}`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration);
	return {
		/**
		 * 특정 채팅방에 입장하는 API 입니다. 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.
		 * @summary 채팅방 입장 API
		 * @param {string} chatroomUuid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async enterChatroom(
			chatroomUuid: string,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseEnterChatroomResponse>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.enterChatroom(
				chatroomUuid,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ChatApi.enterChatroom"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 채팅방 나가기 API 입니다.
		 * @summary 채팅방 나가기 API
		 * @param {string} chatroomUuid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async exitChatroom(
			chatroomUuid: string,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseObject>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.exitChatroom(
				chatroomUuid,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ChatApi.exitChatroom"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 특정 채팅방의 메시지 내역을 조회하는 API 입니다.  cursor 파라미터를 보내면, 해당 timestamp 이전에 전송된 메시지 최대 20개를 조회합니다.  cursor 파라미터를 보내지 않으면, 해당 채팅방의 가장 최근 메시지 내역을 조회합니다.
		 * @summary 채팅 내역 조회 API
		 * @param {string} chatroomUuid
		 * @param {number} [cursor] 페이징을 위한 커서, 13자리 timestamp integer를 보내주세요. (UTC 기준)
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getChatMessages(
			chatroomUuid: string,
			cursor?: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseChatMessageListResponse>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getChatMessages(
				chatroomUuid,
				cursor,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ChatApi.getChatMessages"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 회원이 속한 채팅방 목록을 조회하는 API 입니다.
		 * @summary 채팅방 목록 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getChatroom(
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseChatroomListResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getChatroom(options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ChatApi.getChatroom"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 안읽은 메시지가 속한 채팅방의 uuid 목록을 조회하는 API 입니다.
		 * @summary 안읽은 채팅방 uuid 목록 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getUnreadChatroomUuid(
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseListString>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getUnreadChatroomUuid(options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ChatApi.getUnreadChatroomUuid"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 특정 채팅방의 메시지를 읽음 처리하는 API 입니다.
		 * @summary 채팅 메시지 읽음 처리 API
		 * @param {string} chatroomUuid
		 * @param {number} [timestamp] 특정 메시지를 읽음 처리하는 경우, 그 메시지의 timestamp를 함께 보내주세요.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async readChatMessage(
			chatroomUuid: string,
			timestamp?: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.readChatMessage(
				chatroomUuid,
				timestamp,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ChatApi.readChatMessage"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 특정 글에서 말 걸어보기 버튼을 통해 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 리턴합니다.
		 * @summary 특정 글을 통한 채팅방 시작 API
		 * @param {number} boardId 말 걸어보기 버튼을 누른 게시글의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async startChatroomByBoardId(
			boardId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseEnterChatroomResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.startChatroomByBoardId(
					boardId,
					options,
				);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ChatApi.startChatroomByBoardId"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 특정 대상 회원과의 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 반환합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 반환합니다.
		 * @summary 특정 회원과 채팅방 시작 API
		 * @param {number} memberId 채팅방을 시작할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async startChatroomByMemberId(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseEnterChatroomResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.startChatroomByMemberId(
					memberId,
					options,
				);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["ChatApi.startChatroomByMemberId"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
	};
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance,
) {
	const localVarFp = ChatApiFp(configuration);
	return {
		/**
		 * 특정 채팅방에 입장하는 API 입니다. 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.
		 * @summary 채팅방 입장 API
		 * @param {string} chatroomUuid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		enterChatroom(
			chatroomUuid: string,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseEnterChatroomResponse> {
			return localVarFp
				.enterChatroom(chatroomUuid, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 채팅방 나가기 API 입니다.
		 * @summary 채팅방 나가기 API
		 * @param {string} chatroomUuid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		exitChatroom(
			chatroomUuid: string,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseObject> {
			return localVarFp
				.exitChatroom(chatroomUuid, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 특정 채팅방의 메시지 내역을 조회하는 API 입니다.  cursor 파라미터를 보내면, 해당 timestamp 이전에 전송된 메시지 최대 20개를 조회합니다.  cursor 파라미터를 보내지 않으면, 해당 채팅방의 가장 최근 메시지 내역을 조회합니다.
		 * @summary 채팅 내역 조회 API
		 * @param {string} chatroomUuid
		 * @param {number} [cursor] 페이징을 위한 커서, 13자리 timestamp integer를 보내주세요. (UTC 기준)
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getChatMessages(
			chatroomUuid: string,
			cursor?: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseChatMessageListResponse> {
			return localVarFp
				.getChatMessages(chatroomUuid, cursor, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 회원이 속한 채팅방 목록을 조회하는 API 입니다.
		 * @summary 채팅방 목록 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getChatroom(
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseChatroomListResponse> {
			return localVarFp
				.getChatroom(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 안읽은 메시지가 속한 채팅방의 uuid 목록을 조회하는 API 입니다.
		 * @summary 안읽은 채팅방 uuid 목록 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getUnreadChatroomUuid(
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseListString> {
			return localVarFp
				.getUnreadChatroomUuid(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 특정 채팅방의 메시지를 읽음 처리하는 API 입니다.
		 * @summary 채팅 메시지 읽음 처리 API
		 * @param {string} chatroomUuid
		 * @param {number} [timestamp] 특정 메시지를 읽음 처리하는 경우, 그 메시지의 timestamp를 함께 보내주세요.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		readChatMessage(
			chatroomUuid: string,
			timestamp?: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.readChatMessage(chatroomUuid, timestamp, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 특정 글에서 말 걸어보기 버튼을 통해 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 리턴합니다.
		 * @summary 특정 글을 통한 채팅방 시작 API
		 * @param {number} boardId 말 걸어보기 버튼을 누른 게시글의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		startChatroomByBoardId(
			boardId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseEnterChatroomResponse> {
			return localVarFp
				.startChatroomByBoardId(boardId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 특정 대상 회원과의 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 반환합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 반환합니다.
		 * @summary 특정 회원과 채팅방 시작 API
		 * @param {number} memberId 채팅방을 시작할 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		startChatroomByMemberId(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseEnterChatroomResponse> {
			return localVarFp
				.startChatroomByMemberId(memberId, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
	/**
	 * 특정 채팅방에 입장하는 API 입니다. 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.
	 * @summary 채팅방 입장 API
	 * @param {string} chatroomUuid
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChatApi
	 */
	public enterChatroom(chatroomUuid: string, options?: RawAxiosRequestConfig) {
		return ChatApiFp(this.configuration)
			.enterChatroom(chatroomUuid, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 채팅방 나가기 API 입니다.
	 * @summary 채팅방 나가기 API
	 * @param {string} chatroomUuid
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChatApi
	 */
	public exitChatroom(chatroomUuid: string, options?: RawAxiosRequestConfig) {
		return ChatApiFp(this.configuration)
			.exitChatroom(chatroomUuid, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 특정 채팅방의 메시지 내역을 조회하는 API 입니다.  cursor 파라미터를 보내면, 해당 timestamp 이전에 전송된 메시지 최대 20개를 조회합니다.  cursor 파라미터를 보내지 않으면, 해당 채팅방의 가장 최근 메시지 내역을 조회합니다.
	 * @summary 채팅 내역 조회 API
	 * @param {string} chatroomUuid
	 * @param {number} [cursor] 페이징을 위한 커서, 13자리 timestamp integer를 보내주세요. (UTC 기준)
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChatApi
	 */
	public getChatMessages(
		chatroomUuid: string,
		cursor?: number,
		options?: RawAxiosRequestConfig,
	) {
		return ChatApiFp(this.configuration)
			.getChatMessages(chatroomUuid, cursor, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 회원이 속한 채팅방 목록을 조회하는 API 입니다.
	 * @summary 채팅방 목록 조회 API
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChatApi
	 */
	public getChatroom(options?: RawAxiosRequestConfig) {
		return ChatApiFp(this.configuration)
			.getChatroom(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 안읽은 메시지가 속한 채팅방의 uuid 목록을 조회하는 API 입니다.
	 * @summary 안읽은 채팅방 uuid 목록 조회 API
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChatApi
	 */
	public getUnreadChatroomUuid(options?: RawAxiosRequestConfig) {
		return ChatApiFp(this.configuration)
			.getUnreadChatroomUuid(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 특정 채팅방의 메시지를 읽음 처리하는 API 입니다.
	 * @summary 채팅 메시지 읽음 처리 API
	 * @param {string} chatroomUuid
	 * @param {number} [timestamp] 특정 메시지를 읽음 처리하는 경우, 그 메시지의 timestamp를 함께 보내주세요.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChatApi
	 */
	public readChatMessage(
		chatroomUuid: string,
		timestamp?: number,
		options?: RawAxiosRequestConfig,
	) {
		return ChatApiFp(this.configuration)
			.readChatMessage(chatroomUuid, timestamp, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 특정 글에서 말 걸어보기 버튼을 통해 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 리턴합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 리턴합니다.
	 * @summary 특정 글을 통한 채팅방 시작 API
	 * @param {number} boardId 말 걸어보기 버튼을 누른 게시글의 id 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChatApi
	 */
	public startChatroomByBoardId(
		boardId: number,
		options?: RawAxiosRequestConfig,
	) {
		return ChatApiFp(this.configuration)
			.startChatroomByBoardId(boardId, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 특정 대상 회원과의 채팅방을 시작하는 API 입니다.  대상 회원과의 채팅방이 이미 존재하는 경우, 채팅방 uuid, 상대 회원 정보와 채팅 메시지 내역 등을 반환합니다.  대상 회원과의 채팅방이 존재하지 않는 경우, 채팅방을 새로 생성해 해당 채팅방의 uuid, 상대 회원 정보 등을 반환합니다.
	 * @summary 특정 회원과 채팅방 시작 API
	 * @param {number} memberId 채팅방을 시작할 대상 회원의 id 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChatApi
	 */
	public startChatroomByMemberId(
		memberId: number,
		options?: RawAxiosRequestConfig,
	) {
		return ChatApiFp(this.configuration)
			.startChatroomByMemberId(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
