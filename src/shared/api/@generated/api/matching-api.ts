/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseMatchingFoundResponse } from '../models';
// @ts-ignore
import type { ApiResponsePriorityListResponse } from '../models';
// @ts-ignore
import type { ApiResponseString } from '../models';
// @ts-ignore
import type { InitializingMatchingRequest } from '../models';
// @ts-ignore
import type { MatchingStatus } from '../models';
/**
 * MatchingApi - axios parameter creator
 * @export
 */
export const MatchingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API triggered when a match is found
         * @summary 매칭 FOUND API
         * @param {string} matchingUuid 
         * @param {string} targetMatchingUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMatching: async (matchingUuid: string, targetMatchingUuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchingUuid' is not null or undefined
            assertParamExists('findMatching', 'matchingUuid', matchingUuid)
            // verify required parameter 'targetMatchingUuid' is not null or undefined
            assertParamExists('findMatching', 'targetMatchingUuid', targetMatchingUuid)
            const localVarPath = `/api/v2/internal/matching/found/{matchingUuid}/{targetMatchingUuid}`
                .replace(`{${"matchingUuid"}}`, encodeURIComponent(String(matchingUuid)))
                .replace(`{${"targetMatchingUuid"}}`, encodeURIComponent(String(targetMatchingUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for calculating and recording matching
         * @summary 매칭 우선순위 계산 및 기록 저장 API
         * @param {number} memberId 
         * @param {InitializingMatchingRequest} initializingMatchingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeMatching: async (memberId: number, initializingMatchingRequest: InitializingMatchingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('initializeMatching', 'memberId', memberId)
            // verify required parameter 'initializingMatchingRequest' is not null or undefined
            assertParamExists('initializeMatching', 'initializingMatchingRequest', initializingMatchingRequest)
            const localVarPath = `/api/v2/internal/matching/priority/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(initializingMatchingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API triggered when a match is succeed
         * @summary 매칭 SUCCESS API
         * @param {string} matchingUuid 
         * @param {string} targetMatchingUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successMatching: async (matchingUuid: string, targetMatchingUuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchingUuid' is not null or undefined
            assertParamExists('successMatching', 'matchingUuid', matchingUuid)
            // verify required parameter 'targetMatchingUuid' is not null or undefined
            assertParamExists('successMatching', 'targetMatchingUuid', targetMatchingUuid)
            const localVarPath = `/api/v2/internal/matching/success/{matchingUuid}/{targetMatchingUuid}`
                .replace(`{${"matchingUuid"}}`, encodeURIComponent(String(matchingUuid)))
                .replace(`{${"targetMatchingUuid"}}`, encodeURIComponent(String(targetMatchingUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for updating both matching status
         * @summary 나와 상대방 매칭 status 변경
         * @param {string} matchingUuid 
         * @param {MatchingStatus} status 매칭 상태
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBothMatchingStatus: async (matchingUuid: string, status: MatchingStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchingUuid' is not null or undefined
            assertParamExists('updateBothMatchingStatus', 'matchingUuid', matchingUuid)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('updateBothMatchingStatus', 'status', status)
            const localVarPath = `/api/v2/internal/matching/status/target/{matchingUuid}/{status}`
                .replace(`{${"matchingUuid"}}`, encodeURIComponent(String(matchingUuid)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for updating my matching status
         * @summary 내 매칭 status 변경
         * @param {string} matchingUuid 
         * @param {MatchingStatus} status 매칭 상태
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMatchingStatus: async (matchingUuid: string, status: MatchingStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchingUuid' is not null or undefined
            assertParamExists('updateMatchingStatus', 'matchingUuid', matchingUuid)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('updateMatchingStatus', 'status', status)
            const localVarPath = `/api/v2/internal/matching/status/{matchingUuid}/{status}`
                .replace(`{${"matchingUuid"}}`, encodeURIComponent(String(matchingUuid)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchingApi - functional programming interface
 * @export
 */
export const MatchingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MatchingApiAxiosParamCreator(configuration)
    return {
        /**
         * API triggered when a match is found
         * @summary 매칭 FOUND API
         * @param {string} matchingUuid 
         * @param {string} targetMatchingUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMatching(matchingUuid: string, targetMatchingUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMatchingFoundResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findMatching(matchingUuid, targetMatchingUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatchingApi.findMatching']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API for calculating and recording matching
         * @summary 매칭 우선순위 계산 및 기록 저장 API
         * @param {number} memberId 
         * @param {InitializingMatchingRequest} initializingMatchingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initializeMatching(memberId: number, initializingMatchingRequest: InitializingMatchingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePriorityListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initializeMatching(memberId, initializingMatchingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatchingApi.initializeMatching']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API triggered when a match is succeed
         * @summary 매칭 SUCCESS API
         * @param {string} matchingUuid 
         * @param {string} targetMatchingUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successMatching(matchingUuid: string, targetMatchingUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successMatching(matchingUuid, targetMatchingUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatchingApi.successMatching']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API for updating both matching status
         * @summary 나와 상대방 매칭 status 변경
         * @param {string} matchingUuid 
         * @param {MatchingStatus} status 매칭 상태
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBothMatchingStatus(matchingUuid: string, status: MatchingStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBothMatchingStatus(matchingUuid, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatchingApi.updateBothMatchingStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API for updating my matching status
         * @summary 내 매칭 status 변경
         * @param {string} matchingUuid 
         * @param {MatchingStatus} status 매칭 상태
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMatchingStatus(matchingUuid: string, status: MatchingStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMatchingStatus(matchingUuid, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MatchingApi.updateMatchingStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MatchingApi - factory interface
 * @export
 */
export const MatchingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatchingApiFp(configuration)
    return {
        /**
         * API triggered when a match is found
         * @summary 매칭 FOUND API
         * @param {string} matchingUuid 
         * @param {string} targetMatchingUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMatching(matchingUuid: string, targetMatchingUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMatchingFoundResponse> {
            return localVarFp.findMatching(matchingUuid, targetMatchingUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * API for calculating and recording matching
         * @summary 매칭 우선순위 계산 및 기록 저장 API
         * @param {number} memberId 
         * @param {InitializingMatchingRequest} initializingMatchingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeMatching(memberId: number, initializingMatchingRequest: InitializingMatchingRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePriorityListResponse> {
            return localVarFp.initializeMatching(memberId, initializingMatchingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API triggered when a match is succeed
         * @summary 매칭 SUCCESS API
         * @param {string} matchingUuid 
         * @param {string} targetMatchingUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successMatching(matchingUuid: string, targetMatchingUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.successMatching(matchingUuid, targetMatchingUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * API for updating both matching status
         * @summary 나와 상대방 매칭 status 변경
         * @param {string} matchingUuid 
         * @param {MatchingStatus} status 매칭 상태
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBothMatchingStatus(matchingUuid: string, status: MatchingStatus, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.updateBothMatchingStatus(matchingUuid, status, options).then((request) => request(axios, basePath));
        },
        /**
         * API for updating my matching status
         * @summary 내 매칭 status 변경
         * @param {string} matchingUuid 
         * @param {MatchingStatus} status 매칭 상태
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMatchingStatus(matchingUuid: string, status: MatchingStatus, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.updateMatchingStatus(matchingUuid, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatchingApi - object-oriented interface
 * @export
 * @class MatchingApi
 * @extends {BaseAPI}
 */
export class MatchingApi extends BaseAPI {
    /**
     * API triggered when a match is found
     * @summary 매칭 FOUND API
     * @param {string} matchingUuid 
     * @param {string} targetMatchingUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingApi
     */
    public findMatching(matchingUuid: string, targetMatchingUuid: string, options?: RawAxiosRequestConfig) {
        return MatchingApiFp(this.configuration).findMatching(matchingUuid, targetMatchingUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API for calculating and recording matching
     * @summary 매칭 우선순위 계산 및 기록 저장 API
     * @param {number} memberId 
     * @param {InitializingMatchingRequest} initializingMatchingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingApi
     */
    public initializeMatching(memberId: number, initializingMatchingRequest: InitializingMatchingRequest, options?: RawAxiosRequestConfig) {
        return MatchingApiFp(this.configuration).initializeMatching(memberId, initializingMatchingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API triggered when a match is succeed
     * @summary 매칭 SUCCESS API
     * @param {string} matchingUuid 
     * @param {string} targetMatchingUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingApi
     */
    public successMatching(matchingUuid: string, targetMatchingUuid: string, options?: RawAxiosRequestConfig) {
        return MatchingApiFp(this.configuration).successMatching(matchingUuid, targetMatchingUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API for updating both matching status
     * @summary 나와 상대방 매칭 status 변경
     * @param {string} matchingUuid 
     * @param {MatchingStatus} status 매칭 상태
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingApi
     */
    public updateBothMatchingStatus(matchingUuid: string, status: MatchingStatus, options?: RawAxiosRequestConfig) {
        return MatchingApiFp(this.configuration).updateBothMatchingStatus(matchingUuid, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API for updating my matching status
     * @summary 내 매칭 status 변경
     * @param {string} matchingUuid 
     * @param {MatchingStatus} status 매칭 상태
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingApi
     */
    public updateMatchingStatus(matchingUuid: string, status: MatchingStatus, options?: RawAxiosRequestConfig) {
        return MatchingApiFp(this.configuration).updateMatchingStatus(matchingUuid, status, options).then((request) => request(this.axios, this.basePath));
    }
}

