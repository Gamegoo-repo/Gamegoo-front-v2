/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from "../common";
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	type RequestArgs,
	BaseAPI,
	RequiredError,
	operationServerMap,
} from "../base";
// @ts-ignore
import type { ApiResponseLoginResponse } from "../models";
// @ts-ignore
import type { ApiResponseRefreshTokenResponse } from "../models";
// @ts-ignore
import type { ApiResponseString } from "../models";
// @ts-ignore
import type { JoinRequest } from "../models";
// @ts-ignore
import type { LoginRequest } from "../models";
// @ts-ignore
import type { RefreshTokenRequest } from "../models";
/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (
	configuration?: Configuration,
) {
	return {
		/**
		 * API for Blinding Member
		 * @summary 탈퇴 API입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		blindMember: async (
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v2/auth`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "DELETE",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
		 * @summary 임시 access token 발급 API
		 * @param {number} memberId 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getTestAccessToken1: async (
			memberId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'memberId' is not null or undefined
			assertParamExists("getTestAccessToken1", "memberId", memberId);
			const localVarPath = `/api/v2/auth/token/{memberId}`.replace(
				`{${"memberId"}}`,
				encodeURIComponent(String(memberId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 회원가입 API입니다.
		 * @summary 회원가입
		 * @param {JoinRequest} joinRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		join: async (
			joinRequest: JoinRequest,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'joinRequest' is not null or undefined
			assertParamExists("join", "joinRequest", joinRequest);
			const localVarPath = `/api/v2/auth/join`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				joinRequest,
				localVarRequestOptions,
				configuration,
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 로그인 API입니다.
		 * @summary 로그인
		 * @param {LoginRequest} loginRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		login: async (
			loginRequest: LoginRequest,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'loginRequest' is not null or undefined
			assertParamExists("login", "loginRequest", loginRequest);
			const localVarPath = `/api/v2/auth/login`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				loginRequest,
				localVarRequestOptions,
				configuration,
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * API for logout
		 * @summary logout API 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		logout: async (
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v2/auth/logout`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * API for Refresh Token
		 * @summary refresh   토큰을 통한 access, refresh 토큰 재발급 API 입니다.
		 * @param {RefreshTokenRequest} refreshTokenRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateToken: async (
			refreshTokenRequest: RefreshTokenRequest,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'refreshTokenRequest' is not null or undefined
			assertParamExists(
				"updateToken",
				"refreshTokenRequest",
				refreshTokenRequest,
			);
			const localVarPath = `/api/v2/auth/refresh`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				refreshTokenRequest,
				localVarRequestOptions,
				configuration,
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		AuthControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 * API for Blinding Member
		 * @summary 탈퇴 API입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async blindMember(
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.blindMember(options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["AuthControllerApi.blindMember"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
		 * @summary 임시 access token 발급 API
		 * @param {number} memberId 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getTestAccessToken1(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getTestAccessToken1(memberId, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["AuthControllerApi.getTestAccessToken1"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 회원가입 API입니다.
		 * @summary 회원가입
		 * @param {JoinRequest} joinRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async join(
			joinRequest: JoinRequest,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.join(
				joinRequest,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["AuthControllerApi.join"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 로그인 API입니다.
		 * @summary 로그인
		 * @param {LoginRequest} loginRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async login(
			loginRequest: LoginRequest,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseLoginResponse>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.login(
				loginRequest,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["AuthControllerApi.login"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * API for logout
		 * @summary logout API 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async logout(
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseString>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["AuthControllerApi.logout"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * API for Refresh Token
		 * @summary refresh   토큰을 통한 access, refresh 토큰 재발급 API 입니다.
		 * @param {RefreshTokenRequest} refreshTokenRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateToken(
			refreshTokenRequest: RefreshTokenRequest,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseRefreshTokenResponse>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateToken(
				refreshTokenRequest,
				options,
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["AuthControllerApi.updateToken"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
	};
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance,
) {
	const localVarFp = AuthControllerApiFp(configuration);
	return {
		/**
		 * API for Blinding Member
		 * @summary 탈퇴 API입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		blindMember(
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.blindMember(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
		 * @summary 임시 access token 발급 API
		 * @param {number} memberId 대상 회원의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getTestAccessToken1(
			memberId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.getTestAccessToken1(memberId, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 회원가입 API입니다.
		 * @summary 회원가입
		 * @param {JoinRequest} joinRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		join(
			joinRequest: JoinRequest,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseString> {
			return localVarFp
				.join(joinRequest, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 로그인 API입니다.
		 * @summary 로그인
		 * @param {LoginRequest} loginRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		login(
			loginRequest: LoginRequest,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseLoginResponse> {
			return localVarFp
				.login(loginRequest, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * API for logout
		 * @summary logout API 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		logout(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
			return localVarFp
				.logout(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * API for Refresh Token
		 * @summary refresh   토큰을 통한 access, refresh 토큰 재발급 API 입니다.
		 * @param {RefreshTokenRequest} refreshTokenRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateToken(
			refreshTokenRequest: RefreshTokenRequest,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseRefreshTokenResponse> {
			return localVarFp
				.updateToken(refreshTokenRequest, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
	/**
	 * API for Blinding Member
	 * @summary 탈퇴 API입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthControllerApi
	 */
	public blindMember(options?: RawAxiosRequestConfig) {
		return AuthControllerApiFp(this.configuration)
			.blindMember(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
	 * @summary 임시 access token 발급 API
	 * @param {number} memberId 대상 회원의 id 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthControllerApi
	 */
	public getTestAccessToken1(
		memberId: number,
		options?: RawAxiosRequestConfig,
	) {
		return AuthControllerApiFp(this.configuration)
			.getTestAccessToken1(memberId, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 회원가입 API입니다.
	 * @summary 회원가입
	 * @param {JoinRequest} joinRequest
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthControllerApi
	 */
	public join(joinRequest: JoinRequest, options?: RawAxiosRequestConfig) {
		return AuthControllerApiFp(this.configuration)
			.join(joinRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 로그인 API입니다.
	 * @summary 로그인
	 * @param {LoginRequest} loginRequest
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthControllerApi
	 */
	public login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
		return AuthControllerApiFp(this.configuration)
			.login(loginRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * API for logout
	 * @summary logout API 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthControllerApi
	 */
	public logout(options?: RawAxiosRequestConfig) {
		return AuthControllerApiFp(this.configuration)
			.logout(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * API for Refresh Token
	 * @summary refresh   토큰을 통한 access, refresh 토큰 재발급 API 입니다.
	 * @param {RefreshTokenRequest} refreshTokenRequest
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthControllerApi
	 */
	public updateToken(
		refreshTokenRequest: RefreshTokenRequest,
		options?: RawAxiosRequestConfig,
	) {
		return AuthControllerApiFp(this.configuration)
			.updateToken(refreshTokenRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
