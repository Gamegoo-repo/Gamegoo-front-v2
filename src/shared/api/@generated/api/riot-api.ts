/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseString } from '../models';
// @ts-ignore
import type { RiotJoinRequest } from '../models';
// @ts-ignore
import type { RiotVerifyExistUserRequest } from '../models';
/**
 * RiotApi - axios parameter creator
 * @export
 */
export const RiotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Riot OAuth 인증 코드 콜백 처리
         * @param {string} code 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleRSOCallback: async (code: string, state?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('handleRSOCallback', 'code', code)
            const localVarPath = `/api/v2/riot/oauth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for RSO join
         * @summary RSO 전용 회원가입 API
         * @param {RiotJoinRequest} riotJoinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinByRSO: async (riotJoinRequest: RiotJoinRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'riotJoinRequest' is not null or undefined
            assertParamExists('joinByRSO', 'riotJoinRequest', riotJoinRequest)
            const localVarPath = `/api/v2/riot/join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(riotJoinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for verifying account by riot API
         * @summary 실제 존재하는 Riot 계정인지 검증하는 API
         * @param {RiotVerifyExistUserRequest} riotVerifyExistUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRiot: async (riotVerifyExistUserRequest: RiotVerifyExistUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'riotVerifyExistUserRequest' is not null or undefined
            assertParamExists('verifyRiot', 'riotVerifyExistUserRequest', riotVerifyExistUserRequest)
            const localVarPath = `/api/v2/riot/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(riotVerifyExistUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RiotApi - functional programming interface
 * @export
 */
export const RiotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RiotApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Riot OAuth 인증 코드 콜백 처리
         * @param {string} code 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleRSOCallback(code: string, state?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleRSOCallback(code, state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RiotApi.handleRSOCallback']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API for RSO join
         * @summary RSO 전용 회원가입 API
         * @param {RiotJoinRequest} riotJoinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinByRSO(riotJoinRequest: RiotJoinRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinByRSO(riotJoinRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RiotApi.joinByRSO']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API for verifying account by riot API
         * @summary 실제 존재하는 Riot 계정인지 검증하는 API
         * @param {RiotVerifyExistUserRequest} riotVerifyExistUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyRiot(riotVerifyExistUserRequest: RiotVerifyExistUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyRiot(riotVerifyExistUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RiotApi.verifyRiot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RiotApi - factory interface
 * @export
 */
export const RiotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RiotApiFp(configuration)
    return {
        /**
         * 
         * @summary Riot OAuth 인증 코드 콜백 처리
         * @param {string} code 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleRSOCallback(code: string, state?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.handleRSOCallback(code, state, options).then((request) => request(axios, basePath));
        },
        /**
         * API for RSO join
         * @summary RSO 전용 회원가입 API
         * @param {RiotJoinRequest} riotJoinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinByRSO(riotJoinRequest: RiotJoinRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.joinByRSO(riotJoinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API for verifying account by riot API
         * @summary 실제 존재하는 Riot 계정인지 검증하는 API
         * @param {RiotVerifyExistUserRequest} riotVerifyExistUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRiot(riotVerifyExistUserRequest: RiotVerifyExistUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.verifyRiot(riotVerifyExistUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RiotApi - object-oriented interface
 * @export
 * @class RiotApi
 * @extends {BaseAPI}
 */
export class RiotApi extends BaseAPI {
    /**
     * 
     * @summary Riot OAuth 인증 코드 콜백 처리
     * @param {string} code 
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiotApi
     */
    public handleRSOCallback(code: string, state?: string, options?: RawAxiosRequestConfig) {
        return RiotApiFp(this.configuration).handleRSOCallback(code, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API for RSO join
     * @summary RSO 전용 회원가입 API
     * @param {RiotJoinRequest} riotJoinRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiotApi
     */
    public joinByRSO(riotJoinRequest: RiotJoinRequest, options?: RawAxiosRequestConfig) {
        return RiotApiFp(this.configuration).joinByRSO(riotJoinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API for verifying account by riot API
     * @summary 실제 존재하는 Riot 계정인지 검증하는 API
     * @param {RiotVerifyExistUserRequest} riotVerifyExistUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiotApi
     */
    public verifyRiot(riotVerifyExistUserRequest: RiotVerifyExistUserRequest, options?: RawAxiosRequestConfig) {
        return RiotApiFp(this.configuration).verifyRiot(riotVerifyExistUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

