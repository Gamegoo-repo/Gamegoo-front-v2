/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseLong } from '../models';
// @ts-ignore
import type { ApiResponseObject } from '../models';
// @ts-ignore
import type { ApiResponseString } from '../models';
// @ts-ignore
import type { RiotUserInfo } from '../models';
/**
 * HomeApi - axios parameter creator
 * @export
 */
export const HomeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 예외를 발생시켜 테스트합니다.
         * @summary 에러 테스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        error: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/errortest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 소환사명과 태그로 해당 회원 id 조회
         * @param {RiotUserInfo} riotUserInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberId: async (riotUserInfo: RiotUserInfo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'riotUserInfo' is not null or undefined
            assertParamExists('getMemberId', 'riotUserInfo', riotUserInfo)
            const localVarPath = `/home/getMemberId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(riotUserInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
         * @summary memberId로 access token 발급 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestAccessToken: async (memberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getTestAccessToken', 'memberId', memberId)
            const localVarPath = `/home/token/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * health check를 위한 API 입니다.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API 서비스 상태를 확인합니다.
         * @summary 홈 엔드포인트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/home`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 라이엇 계정 회원 가입
         * @param {RiotUserInfo} riotUserInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinTest: async (riotUserInfo: RiotUserInfo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'riotUserInfo' is not null or undefined
            assertParamExists('joinTest', 'riotUserInfo', riotUserInfo)
            const localVarPath = `/home/join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(riotUserInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 챔피언 전적 통계 갱신
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshStats: async (memberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('refreshStats', 'memberId', memberId)
            const localVarPath = `/home/refresh/stats/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT TOKEN required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomeApi - functional programming interface
 * @export
 */
export const HomeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomeApiAxiosParamCreator(configuration)
    return {
        /**
         * 예외를 발생시켜 테스트합니다.
         * @summary 에러 테스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async error(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.error(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeApi.error']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 소환사명과 태그로 해당 회원 id 조회
         * @param {RiotUserInfo} riotUserInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberId(riotUserInfo: RiotUserInfo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberId(riotUserInfo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeApi.getMemberId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
         * @summary memberId로 access token 발급 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestAccessToken(memberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestAccessToken(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeApi.getTestAccessToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * health check를 위한 API 입니다.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthcheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeApi.healthcheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API 서비스 상태를 확인합니다.
         * @summary 홈 엔드포인트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async home(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.home(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeApi.home']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 라이엇 계정 회원 가입
         * @param {RiotUserInfo} riotUserInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinTest(riotUserInfo: RiotUserInfo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinTest(riotUserInfo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeApi.joinTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 챔피언 전적 통계 갱신
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshStats(memberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshStats(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeApi.refreshStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HomeApi - factory interface
 * @export
 */
export const HomeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomeApiFp(configuration)
    return {
        /**
         * 예외를 발생시켜 테스트합니다.
         * @summary 에러 테스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        error(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseObject> {
            return localVarFp.error(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 소환사명과 태그로 해당 회원 id 조회
         * @param {RiotUserInfo} riotUserInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberId(riotUserInfo: RiotUserInfo, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseLong> {
            return localVarFp.getMemberId(riotUserInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
         * @summary memberId로 access token 발급 API
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestAccessToken(memberId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.getTestAccessToken(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * health check를 위한 API 입니다.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheck(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));
        },
        /**
         * API 서비스 상태를 확인합니다.
         * @summary 홈 엔드포인트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.home(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 라이엇 계정 회원 가입
         * @param {RiotUserInfo} riotUserInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinTest(riotUserInfo: RiotUserInfo, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseObject> {
            return localVarFp.joinTest(riotUserInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 챔피언 전적 통계 갱신
         * @param {number} memberId 대상 회원의 id 입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshStats(memberId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.refreshStats(memberId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HomeApi - object-oriented interface
 * @export
 * @class HomeApi
 * @extends {BaseAPI}
 */
export class HomeApi extends BaseAPI {
    /**
     * 예외를 발생시켜 테스트합니다.
     * @summary 에러 테스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public error(options?: RawAxiosRequestConfig) {
        return HomeApiFp(this.configuration).error(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 소환사명과 태그로 해당 회원 id 조회
     * @param {RiotUserInfo} riotUserInfo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public getMemberId(riotUserInfo: RiotUserInfo, options?: RawAxiosRequestConfig) {
        return HomeApiFp(this.configuration).getMemberId(riotUserInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 테스트용으로 access token을 발급받을 수 있는 API 입니다.
     * @summary memberId로 access token 발급 API
     * @param {number} memberId 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public getTestAccessToken(memberId: number, options?: RawAxiosRequestConfig) {
        return HomeApiFp(this.configuration).getTestAccessToken(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * health check를 위한 API 입니다.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public healthcheck(options?: RawAxiosRequestConfig) {
        return HomeApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API 서비스 상태를 확인합니다.
     * @summary 홈 엔드포인트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public home(options?: RawAxiosRequestConfig) {
        return HomeApiFp(this.configuration).home(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 라이엇 계정 회원 가입
     * @param {RiotUserInfo} riotUserInfo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public joinTest(riotUserInfo: RiotUserInfo, options?: RawAxiosRequestConfig) {
        return HomeApiFp(this.configuration).joinTest(riotUserInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 챔피언 전적 통계 갱신
     * @param {number} memberId 대상 회원의 id 입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public refreshStats(memberId: number, options?: RawAxiosRequestConfig) {
        return HomeApiFp(this.configuration).refreshStats(memberId, options).then((request) => request(this.axios, this.basePath));
    }
}

