/* tslint:disable */
/* eslint-disable */
/**
 * Gamegoo V2 API
 * Gamegoo V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from "../common";
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	type RequestArgs,
	BaseAPI,
	RequiredError,
	operationServerMap,
} from "../base";
// @ts-ignore
import type { ApiResponseInteger } from "../models";
// @ts-ignore
import type { ApiResponseNotificationCursorListResponse } from "../models";
// @ts-ignore
import type { ApiResponseNotificationPageListResponse } from "../models";
// @ts-ignore
import type { ApiResponseReadNotificationResponse } from "../models";
/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (
	configuration?: Configuration,
) {
	return {
		/**
		 * 알림 팝업 화면에서 알림 목록을 조회하는 API 입니다.
		 * @summary 알림 팝업 목록 조회 API
		 * @param {number} [cursor] 페이징을 위한 커서, Long 타입 notificationId를 보내주세요. 보내지 않으면 가장 최근 알림 10개를 조회합니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getNotificationListByCursor: async (
			cursor?: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v2/notification`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (cursor !== undefined) {
				localVarQueryParameter["cursor"] = cursor;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 알림 전체보기 화면에서 알림 목록을 조회하는 API 입니다.
		 * @summary 알림 전체 목록 조회 API
		 * @param {number} page 페이지 번호, 1 이상의 숫자를 입력해 주세요.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getNotificationListByPage: async (
			page: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'page' is not null or undefined
			assertParamExists("getNotificationListByPage", "page", page);
			const localVarPath = `/api/v2/notification/total`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			if (page !== undefined) {
				localVarQueryParameter["page"] = page;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 해당 회원의 안읽은 알림의 개수를 조회하는 API 입니다.
		 * @summary 안읽은 알림 개수 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getUnreadNotificationCount: async (
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			const localVarPath = `/api/v2/notification/unread/count`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * 특정 알림을 읽음 처리하는 API 입니다.
		 * @summary 알림 읽음 처리 API
		 * @param {number} notificationId 읽음 처리할 알림의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		readNotification: async (
			notificationId: number,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'notificationId' is not null or undefined
			assertParamExists("readNotification", "notificationId", notificationId);
			const localVarPath = `/api/v2/notification/{notificationId}`.replace(
				`{${"notificationId"}}`,
				encodeURIComponent(String(notificationId)),
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication JWT TOKEN required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		NotificationApiAxiosParamCreator(configuration);
	return {
		/**
		 * 알림 팝업 화면에서 알림 목록을 조회하는 API 입니다.
		 * @summary 알림 팝업 목록 조회 API
		 * @param {number} [cursor] 페이징을 위한 커서, Long 타입 notificationId를 보내주세요. 보내지 않으면 가장 최근 알림 10개를 조회합니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getNotificationListByCursor(
			cursor?: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseNotificationCursorListResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getNotificationListByCursor(
					cursor,
					options,
				);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["NotificationApi.getNotificationListByCursor"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 알림 전체보기 화면에서 알림 목록을 조회하는 API 입니다.
		 * @summary 알림 전체 목록 조회 API
		 * @param {number} page 페이지 번호, 1 이상의 숫자를 입력해 주세요.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getNotificationListByPage(
			page: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseNotificationPageListResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getNotificationListByPage(
					page,
					options,
				);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["NotificationApi.getNotificationListByPage"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 해당 회원의 안읽은 알림의 개수를 조회하는 API 입니다.
		 * @summary 안읽은 알림 개수 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getUnreadNotificationCount(
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseInteger>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getUnreadNotificationCount(options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["NotificationApi.getUnreadNotificationCount"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 * 특정 알림을 읽음 처리하는 API 입니다.
		 * @summary 알림 읽음 처리 API
		 * @param {number} notificationId 읽음 처리할 알림의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async readNotification(
			notificationId: number,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<ApiResponseReadNotificationResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.readNotification(
					notificationId,
					options,
				);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["NotificationApi.readNotification"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
	};
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance,
) {
	const localVarFp = NotificationApiFp(configuration);
	return {
		/**
		 * 알림 팝업 화면에서 알림 목록을 조회하는 API 입니다.
		 * @summary 알림 팝업 목록 조회 API
		 * @param {number} [cursor] 페이징을 위한 커서, Long 타입 notificationId를 보내주세요. 보내지 않으면 가장 최근 알림 10개를 조회합니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getNotificationListByCursor(
			cursor?: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseNotificationCursorListResponse> {
			return localVarFp
				.getNotificationListByCursor(cursor, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 알림 전체보기 화면에서 알림 목록을 조회하는 API 입니다.
		 * @summary 알림 전체 목록 조회 API
		 * @param {number} page 페이지 번호, 1 이상의 숫자를 입력해 주세요.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getNotificationListByPage(
			page: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseNotificationPageListResponse> {
			return localVarFp
				.getNotificationListByPage(page, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 해당 회원의 안읽은 알림의 개수를 조회하는 API 입니다.
		 * @summary 안읽은 알림 개수 조회 API
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getUnreadNotificationCount(
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseInteger> {
			return localVarFp
				.getUnreadNotificationCount(options)
				.then((request) => request(axios, basePath));
		},
		/**
		 * 특정 알림을 읽음 처리하는 API 입니다.
		 * @summary 알림 읽음 처리 API
		 * @param {number} notificationId 읽음 처리할 알림의 id 입니다.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		readNotification(
			notificationId: number,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<ApiResponseReadNotificationResponse> {
			return localVarFp
				.readNotification(notificationId, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
	/**
	 * 알림 팝업 화면에서 알림 목록을 조회하는 API 입니다.
	 * @summary 알림 팝업 목록 조회 API
	 * @param {number} [cursor] 페이징을 위한 커서, Long 타입 notificationId를 보내주세요. 보내지 않으면 가장 최근 알림 10개를 조회합니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof NotificationApi
	 */
	public getNotificationListByCursor(
		cursor?: number,
		options?: RawAxiosRequestConfig,
	) {
		return NotificationApiFp(this.configuration)
			.getNotificationListByCursor(cursor, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 알림 전체보기 화면에서 알림 목록을 조회하는 API 입니다.
	 * @summary 알림 전체 목록 조회 API
	 * @param {number} page 페이지 번호, 1 이상의 숫자를 입력해 주세요.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof NotificationApi
	 */
	public getNotificationListByPage(
		page: number,
		options?: RawAxiosRequestConfig,
	) {
		return NotificationApiFp(this.configuration)
			.getNotificationListByPage(page, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 해당 회원의 안읽은 알림의 개수를 조회하는 API 입니다.
	 * @summary 안읽은 알림 개수 조회 API
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof NotificationApi
	 */
	public getUnreadNotificationCount(options?: RawAxiosRequestConfig) {
		return NotificationApiFp(this.configuration)
			.getUnreadNotificationCount(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * 특정 알림을 읽음 처리하는 API 입니다.
	 * @summary 알림 읽음 처리 API
	 * @param {number} notificationId 읽음 처리할 알림의 id 입니다.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof NotificationApi
	 */
	public readNotification(
		notificationId: number,
		options?: RawAxiosRequestConfig,
	) {
		return NotificationApiFp(this.configuration)
			.readNotification(notificationId, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
